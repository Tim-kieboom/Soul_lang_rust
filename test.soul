//comment 1
/*comment 2*/

// array() {
// 	array := [1,2,3,4,5,6]
// 	el := array[0]
// 	span := array[1..2]
// }

// trait Add<T, O = T, R = T> {
// 	add(this, O other) R
// }



// sum<T>(T a, T b) T {
// 	return a + b
// }

// struct Far {
// 	Foo<int> foo
// }

// struct Bar<T> {
// 	Foo<T> foo
// }

type string typeof str

struct Far<T> impl Add 
where 
	T: SystemNumber + Add + typeof[int, uint] 
{
	T foo
}

trait Add<O, R = O> {
	Add(this, O other) R
}

typeEnum SystemNumber typeof[int, uint] 

struct Foo<T> { 
	str name
	f32 float = 0.2
	int foo {Get; set;} = 1
	T generic
}

class StrBuilder {
	str buffer

	Ctor::[](str[] arr) {
		// this.buffer = ""

		for el in arr {
			// this.buffer += el
		} 
	}

	Ctor() {
		// this.buffer = ""
	}

	Push(str s) {
		// this.buffer += s
	}

	IntoStr() str {
		// return this.buffer
		return ""
	}
}

int sum(this, int a) int {
	return this + a
}

str parse(this@, int a) int {
	return int(1)	
}

sum(int a, int b) int {
	return a + b
}

main() int {

	sum(int a, int b) int {
		return a + b 
	}

	for el in [1,2,3,4] {
		Println(el)
	} 

	while 1 == 2 {
		Println("unreachable")		
	}

	if true {
		Println("true is true")
	}
	else if false {
		Println("false is true")
	}
	else {
		Println("else is true")
	}

	sum(1, 2)

	sum(
		1,
		2
	)

	Println("hello world")
}
























