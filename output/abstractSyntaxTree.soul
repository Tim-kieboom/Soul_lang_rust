Initialize(
	Assignment(
		Variable(const char ch) = Literal(Literal char 'a')
	)
)
Initialize(
	Assignment(
		Variable(const int number) = Literal(Literal untypedInt 1)
	)
)
Initialize(
	Assignment(
		Variable(const f32 float) = Literal(const f32 1)
	)
)
Initialize(
	Assignment(
		Variable(Literal f32 gravity) = Literal(Literal untypedFloat 9.81)
	)
)
Initialize(
	Assignment(
		Variable(Literal uint uintNumber) = Literal(Literal uint 1)
	)
)
Initialize(
	Assignment(
		Variable(const str[] strarray) = Literal(Literal str[] __programMemory_3)
	)
)
TypeDef(
	string typedef i32
)
FunctionBody(ifs(){
	Initialize(
		Assignment(
			Variable(int condition) = Literal(Literal untypedInt 1)
		)
	)
	If(BinaryExpression(Variable(int condition) == Literal(Literal untypedInt 1), type: bool){
		Initialize(
			Assignment(
				Variable(int f) = Literal(int 1)
			)
		)
		Assignment(
			Variable(int condition) = Literal(int 1)
		)
		FunctionCall(Println(Variable(int condition)))
		
	}.deletes(f,))
	If(BinaryExpression(Variable(int condition) == Literal(Literal untypedInt 2), type: bool){
		Initialize(
			Assignment(
				Variable(int f) = Literal(int 1)
			)
		)
		FunctionCall(Println(Variable(int condition)))
		
	}.deletes(f,))
	Else({
		Initialize(
			Assignment(
				Variable(int f) = Literal(int 1)
			)
		)
		FunctionCall(Println(Variable(int condition)))
		
	}.deletes(f,))
	
}.deletes(condition,))

FunctionBody(array(){
	Initialize(
		Assignment(
			Variable(int[] array) = Literal(Literal untypedInt[] __programMemory_4)
		)
	)
	Initialize(
		Assignment(
			Variable(uint index) = Literal(uint 3)
		)
	)
	Initialize(
		Assignment(
			Variable(string name) = Literal(string 1)
		)
	)
	Initialize(
		Assignment(
			Variable(int@ second) = @Index(Variable(int[] array)[Literal(Literal untypedInt 1)], type: int)
		)
	)
	Assignment(
		Variable(int@ second) = @Index(Variable(int[] array)[Variable(uint index)], type: int)
	)
	Assignment(
		Index(Variable(int[] array)[Literal(Literal untypedInt 0)], type: int) = Literal(int 200)
	)
	FunctionCall(Println(Index(Variable(int[] array)[Literal(Literal untypedInt 0)], type: int)))
	
}.deletes(second,name,index,array,))

FunctionBody(whileArgs(str[]@ args){
	Initialize(
		Assignment(
			Variable(uint argsLen) = FunctionCall(__soul_internal_length__(Variable(str[]@ args)))
		)
	)
	Initialize(
		Assignment(
			Variable(int i) = Literal(Literal untypedInt -1)
		)
	)
	Initialize(
		Assignment(
			Variable(int lastIndex) = FunctionCall(int(Variable(uint argsLen)))
		)
	)
	Assignment(
		Variable(int lastIndex) = BinaryExpression(Variable(int lastIndex) - Literal(int 1), type: int)
	)
	While(BinaryExpression(Variable(int i)++ < Variable(int lastIndex), type: bool){
		FunctionCall(Println(FunctionCall(__soul_format_string__(Variable(Literal str __Soul_c_str_3__), Variable(int i), Variable(Literal str __Soul_c_str_4__), Index(Variable(str[]@ args)[FunctionCall(uint(Variable(int i)))], type: str), Variable(Literal str __Soul_c_str_3__)))))
		
	}.deletes())
	
}.deletes(lastIndex,i,argsLen,args,))

FunctionBody(ref(){
	Initialize(
		Assignment(
			Variable(int@ f) = @Literal(Literal untypedInt __programMemory_5)
		)
	)
	Initialize(
		Assignment(
			Variable(i32 num) = FunctionCall(i32(Literal(Literal untypedInt 1)))
		)
	)
	Initialize(
		Assignment(
			Variable(i32@ ref) = @Variable(i32 num)
		)
	)
	Initialize(
		Assignment(
			Variable(str buffer) = FunctionCall(str())
		)
	)
	Initialize(
		Assignment(
			Variable(str@ refstr) = @Variable(str buffer)
		)
	)
	
}.deletes(refstr,ref,num,f,buffer,))

FunctionBody(Input(mut str& buffer str prefix = Variable(Literal str __Soul_c_str_3__)){
	FunctionCall(Print(Variable(const str prefix)))
	FunctionCall(Input(Variable(str& buffer)))
	
}.deletes(prefix,buffer,))

FunctionBody(main(str[]@ args) int{
	FunctionBody(sum( int a,  int b) int{
		Return(BinaryExpression(Variable(const int a) + Variable(const int b), type: const int), deletes(["b", "a"]))
		
	}.deletes(b,a,))
	
	FunctionCall(Println(Index(Variable(str[]@ args)[Literal(Literal untypedInt 0)], type: str)))
	FunctionCall(Println(Variable(Literal str __Soul_c_str_5__)))
	FunctionCall(Println(FunctionCall(__soul_format_string__(Variable(Literal str __Soul_c_str_6__), FunctionCall(sum(Literal(Literal untypedInt 1), Literal(Literal untypedInt 2))), Variable(Literal str __Soul_c_str_3__)))))
	FunctionCall(array())
	FunctionCall(whileArgs(Variable(str[]@ args)))
	FunctionCall(ref())
	Initialize(
		Assignment(
			Variable(str buffer) = FunctionCall(str())
		)
	)
	FunctionCall(Input(&Variable(str buffer), Variable(Literal str __Soul_c_str_7__)))
	FunctionCall(Println(Variable(str buffer)))
	FunctionCall(ifs())
	FunctionCall(EPrintln(Variable(Literal str __Soul_c_str_8__)))
	Return(Literal(int 0), deletes(["buffer", "args"]))
	
}.deletes(buffer,args,))
