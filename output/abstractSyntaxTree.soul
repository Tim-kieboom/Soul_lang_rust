FunctionBody(main(Literal str[] args) int{
	FunctionBody(sum( int a,  int b) int{
		Return(BinaryExpression(Variable(const int a) + Variable(const int b), type: const int))
		
	})
	
	Initialize(
		Assignment(
			Variable(const int num) = BinaryExpression(Literal(Literal untypedInt 1) + Literal(Literal untypedInt 2), type: Literal untypedInt)
		)
	)
	Initialize(
		Assignment(
			Variable(int sec) = FunctionCall(sum(Variable(const int num), Literal(Literal untypedInt 2)))
		)
	)
	FunctionCall(Println(Variable(const int num)))
	If(BinaryExpression(Variable(const int num) == Literal(Literal untypedInt 3), type: bool){
		Initialize(
			Assignment(
				Variable(int a) = Literal(int 0)
			)
		)
		If(Literal(Literal bool true){
			Assignment(
				Variable(int a) = Literal(int 1)
			)
			
		})
		FunctionCall(Println(Variable(Literal str __Soul_c_str_0__)))
		
	})
	If(Literal(Literal bool true){
		FunctionCall(Println(Variable(Literal str __Soul_c_str_1__)))
		
	})
	Else({
		FunctionCall(Println(Variable(Literal str __Soul_c_str_2__)))
		
	})
	Initialize(
		Assignment(
			Variable(Literal int foo) = BinaryExpression(Literal(Literal untypedInt 1) + BinaryExpression(Literal(Literal untypedInt 1) ** Literal(Literal untypedInt 2), type: Literal untypedInt), type: Literal untypedInt)
		)
	)
	FunctionCall(Println(Variable(Literal int foo)))
	Return(Literal(int 0))
	
})
