<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="57"><g><title>`0x7FFF98615FC0 (1 samples, 1.75%)</title><rect x="0.0000%" y="1077" width="1.7544%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50"></text></g><g><title>`0x7FFF98643D35 (1 samples, 1.75%)</title><rect x="1.7544%" y="1029" width="1.7544%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="2.0044%" y="1039.50"></text></g><g><title>`0x7FFF98615062 (1 samples, 1.75%)</title><rect x="1.7544%" y="1013" width="1.7544%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="2.0044%" y="1023.50"></text></g><g><title>`0x7FFF9861570C (1 samples, 1.75%)</title><rect x="1.7544%" y="997" width="1.7544%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="2.0044%" y="1007.50"></text></g><g><title>`0x7FFF98742014 (1 samples, 1.75%)</title><rect x="1.7544%" y="981" width="1.7544%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="2.0044%" y="991.50"></text></g><g><title>`0x7FFF9864404A (1 samples, 1.75%)</title><rect x="3.5088%" y="1029" width="1.7544%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="3.7588%" y="1039.50"></text></g><g><title>`0x7FFF9869AA1D (1 samples, 1.75%)</title><rect x="3.5088%" y="1013" width="1.7544%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="3.7588%" y="1023.50"></text></g><g><title>`0x7FFF9869B65C (1 samples, 1.75%)</title><rect x="3.5088%" y="997" width="1.7544%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="3.7588%" y="1007.50"></text></g><g><title>`0x7FFF98742014 (1 samples, 1.75%)</title><rect x="3.5088%" y="981" width="1.7544%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="3.7588%" y="991.50"></text></g><g><title>`0x7FFF9864456E (1 samples, 1.75%)</title><rect x="5.2632%" y="1029" width="1.7544%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="5.5132%" y="1039.50"></text></g><g><title>`0x7FFF986C6F9B (1 samples, 1.75%)</title><rect x="5.2632%" y="1013" width="1.7544%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="5.5132%" y="1023.50"></text></g><g><title>`0x7FFF986C7041 (1 samples, 1.75%)</title><rect x="5.2632%" y="997" width="1.7544%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="5.5132%" y="1007.50"></text></g><g><title>`0x7FFF986C716A (1 samples, 1.75%)</title><rect x="5.2632%" y="981" width="1.7544%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="5.5132%" y="991.50"></text></g><g><title>`0x7FFF986C72A3 (1 samples, 1.75%)</title><rect x="5.2632%" y="965" width="1.7544%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="5.5132%" y="975.50"></text></g><g><title>`0x7FFF986C73BC (1 samples, 1.75%)</title><rect x="5.2632%" y="949" width="1.7544%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="5.5132%" y="959.50"></text></g><g><title>`0x7FFF987527CC (1 samples, 1.75%)</title><rect x="5.2632%" y="933" width="1.7544%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="5.5132%" y="943.50"></text></g><g><title>`0x7FFF9875283D (1 samples, 1.75%)</title><rect x="5.2632%" y="917" width="1.7544%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="5.5132%" y="927.50"></text></g><g><title>`0x7FFF98752435 (1 samples, 1.75%)</title><rect x="5.2632%" y="901" width="1.7544%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="5.5132%" y="911.50"></text></g><g><title>`0x7FFF98752446 (1 samples, 1.75%)</title><rect x="5.2632%" y="885" width="1.7544%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="5.5132%" y="895.50"></text></g><g><title>`0x7FFF986446BB (1 samples, 1.75%)</title><rect x="7.0175%" y="1029" width="1.7544%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="7.2675%" y="1039.50"></text></g><g><title>`0x7FFF98616273 (1 samples, 1.75%)</title><rect x="7.0175%" y="1013" width="1.7544%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="7.2675%" y="1023.50"></text></g><g><title>`0x7FFF98617E9F (1 samples, 1.75%)</title><rect x="7.0175%" y="997" width="1.7544%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="7.2675%" y="1007.50"></text></g><g><title>`0x7FFF9861895A (1 samples, 1.75%)</title><rect x="7.0175%" y="981" width="1.7544%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="7.2675%" y="991.50"></text></g><g><title>`0x7FFF98745764 (1 samples, 1.75%)</title><rect x="7.0175%" y="965" width="1.7544%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="7.2675%" y="975.50"></text></g><g><title>`0x7FFF98644FCF (1 samples, 1.75%)</title><rect x="8.7719%" y="1029" width="1.7544%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="9.0219%" y="1039.50"></text></g><g><title>`0x7FFF9864C6CD (1 samples, 1.75%)</title><rect x="8.7719%" y="1013" width="1.7544%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="1"/><text x="9.0219%" y="1023.50"></text></g><g><title>`0x7FFF986214FB (1 samples, 1.75%)</title><rect x="8.7719%" y="997" width="1.7544%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="9.0219%" y="1007.50"></text></g><g><title>`0x7FFF9864531D (1 samples, 1.75%)</title><rect x="10.5263%" y="1029" width="1.7544%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="10.7763%" y="1039.50"></text></g><g><title>`0x7FFF986DFACD (1 samples, 1.75%)</title><rect x="10.5263%" y="1013" width="1.7544%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="10.7763%" y="1023.50"></text></g><g><title>`0x7FFF98742154 (1 samples, 1.75%)</title><rect x="10.5263%" y="997" width="1.7544%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="10.7763%" y="1007.50"></text></g><g><title>`0x7FFF985E9CD3 (1 samples, 1.75%)</title><rect x="12.2807%" y="901" width="1.7544%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="12.5307%" y="911.50"></text></g><g><title>`0x7FFF98747E51 (1 samples, 1.75%)</title><rect x="12.2807%" y="885" width="1.7544%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="12.5307%" y="895.50"></text></g><g><title>`0x7FFF98633C8A (1 samples, 1.75%)</title><rect x="14.0351%" y="885" width="1.7544%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="14.2851%" y="895.50"></text></g><g><title>`0x7FFF985E8842 (3 samples, 5.26%)</title><rect x="12.2807%" y="965" width="5.2632%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="3"/><text x="12.5307%" y="975.50">`0x7FF..</text></g><g><title>`0x7FFF985ED255 (3 samples, 5.26%)</title><rect x="12.2807%" y="949" width="5.2632%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="3"/><text x="12.5307%" y="959.50">`0x7FF..</text></g><g><title>`0x7FFF9864B611 (3 samples, 5.26%)</title><rect x="12.2807%" y="933" width="5.2632%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="3"/><text x="12.5307%" y="943.50">`0x7FF..</text></g><g><title>`0x7FFF9864BBB8 (3 samples, 5.26%)</title><rect x="12.2807%" y="917" width="5.2632%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="3"/><text x="12.5307%" y="927.50">`0x7FF..</text></g><g><title>`0x7FFF985E9F82 (2 samples, 3.51%)</title><rect x="14.0351%" y="901" width="3.5088%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="2"/><text x="14.2851%" y="911.50">`0x..</text></g><g><title>`0x7FFF98633DC2 (1 samples, 1.75%)</title><rect x="15.7895%" y="885" width="1.7544%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="16.0395%" y="895.50"></text></g><g><title>`0x7FFF95BE8A51 (1 samples, 1.75%)</title><rect x="17.5439%" y="837" width="1.7544%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="17.7939%" y="847.50"></text></g><g><title>`0x7FFF9860FEA8 (1 samples, 1.75%)</title><rect x="17.5439%" y="821" width="1.7544%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="1"/><text x="17.7939%" y="831.50"></text></g><g><title>`0x7FFF9861082B (1 samples, 1.75%)</title><rect x="17.5439%" y="805" width="1.7544%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="17.7939%" y="815.50"></text></g><g><title>`0x7FFF987424B4 (1 samples, 1.75%)</title><rect x="17.5439%" y="789" width="1.7544%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="17.7939%" y="799.50"></text></g><g><title>`0x7FFF95CC260D (2 samples, 3.51%)</title><rect x="17.5439%" y="853" width="3.5088%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="2"/><text x="17.7939%" y="863.50">`0x..</text></g><g><title>`0x7FFF95BE8C9E (1 samples, 1.75%)</title><rect x="19.2982%" y="837" width="1.7544%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="1"/><text x="19.5482%" y="847.50"></text></g><g><title>`0x7FFF95BE6160 (1 samples, 1.75%)</title><rect x="19.2982%" y="821" width="1.7544%" height="15" fill="rgb(206,96,30)" fg:x="11" fg:w="1"/><text x="19.5482%" y="831.50"></text></g><g><title>`0x7FFF95CA0630 (1 samples, 1.75%)</title><rect x="19.2982%" y="805" width="1.7544%" height="15" fill="rgb(218,138,4)" fg:x="11" fg:w="1"/><text x="19.5482%" y="815.50"></text></g><g><title>`0x7FFF98742874 (1 samples, 1.75%)</title><rect x="19.2982%" y="789" width="1.7544%" height="15" fill="rgb(250,191,14)" fg:x="11" fg:w="1"/><text x="19.5482%" y="799.50"></text></g><g><title>`0x7FFF95CC2671 (1 samples, 1.75%)</title><rect x="21.0526%" y="853" width="1.7544%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="21.3026%" y="863.50"></text></g><g><title>`0x7FFF95C30CF2 (1 samples, 1.75%)</title><rect x="21.0526%" y="837" width="1.7544%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="21.3026%" y="847.50"></text></g><g><title>`0x7FFF95BF9E7C (1 samples, 1.75%)</title><rect x="21.0526%" y="821" width="1.7544%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="1"/><text x="21.3026%" y="831.50"></text></g><g><title>`0x7FFF95CC2678 (1 samples, 1.75%)</title><rect x="22.8070%" y="853" width="1.7544%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="1"/><text x="23.0570%" y="863.50"></text></g><g><title>`0x7FFF95C97D28 (1 samples, 1.75%)</title><rect x="22.8070%" y="837" width="1.7544%" height="15" fill="rgb(247,123,22)" fg:x="13" fg:w="1"/><text x="23.0570%" y="847.50"></text></g><g><title>`0x7FFF95C97E1C (1 samples, 1.75%)</title><rect x="22.8070%" y="821" width="1.7544%" height="15" fill="rgb(231,138,38)" fg:x="13" fg:w="1"/><text x="23.0570%" y="831.50"></text></g><g><title>`0x7FFF95CC8FB7 (1 samples, 1.75%)</title><rect x="22.8070%" y="805" width="1.7544%" height="15" fill="rgb(231,145,46)" fg:x="13" fg:w="1"/><text x="23.0570%" y="815.50"></text></g><g><title>`0x7FFF95CC93FB (1 samples, 1.75%)</title><rect x="22.8070%" y="789" width="1.7544%" height="15" fill="rgb(251,118,11)" fg:x="13" fg:w="1"/><text x="23.0570%" y="799.50"></text></g><g><title>`0x7FFF95D1D124 (1 samples, 1.75%)</title><rect x="22.8070%" y="773" width="1.7544%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="1"/><text x="23.0570%" y="783.50"></text></g><g><title>`0x7FFF986BB684 (8 samples, 14.04%)</title><rect x="12.2807%" y="1013" width="14.0351%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="8"/><text x="12.5307%" y="1023.50">`0x7FFF986BB684</text></g><g><title>`0x7FFF98635D80 (8 samples, 14.04%)</title><rect x="12.2807%" y="997" width="14.0351%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="8"/><text x="12.5307%" y="1007.50">`0x7FFF98635D80</text></g><g><title>`0x7FFF985E84E0 (8 samples, 14.04%)</title><rect x="12.2807%" y="981" width="14.0351%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="8"/><text x="12.5307%" y="991.50">`0x7FFF985E84E0</text></g><g><title>`0x7FFF985E88D4 (5 samples, 8.77%)</title><rect x="17.5439%" y="965" width="8.7719%" height="15" fill="rgb(248,47,43)" fg:x="10" fg:w="5"/><text x="17.7939%" y="975.50">`0x7FFF985E8..</text></g><g><title>`0x7FFF9861AE03 (5 samples, 8.77%)</title><rect x="17.5439%" y="949" width="8.7719%" height="15" fill="rgb(221,10,30)" fg:x="10" fg:w="5"/><text x="17.7939%" y="959.50">`0x7FFF9861A..</text></g><g><title>`0x7FFF9861BCA6 (5 samples, 8.77%)</title><rect x="17.5439%" y="933" width="8.7719%" height="15" fill="rgb(210,229,1)" fg:x="10" fg:w="5"/><text x="17.7939%" y="943.50">`0x7FFF9861B..</text></g><g><title>`0x7FFF9861BC7A (5 samples, 8.77%)</title><rect x="17.5439%" y="917" width="8.7719%" height="15" fill="rgb(222,148,37)" fg:x="10" fg:w="5"/><text x="17.7939%" y="927.50">`0x7FFF9861B..</text></g><g><title>`0x7FFF9865193C (5 samples, 8.77%)</title><rect x="17.5439%" y="901" width="8.7719%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="5"/><text x="17.7939%" y="911.50">`0x7FFF98651..</text></g><g><title>`0x7FFF986529CE (5 samples, 8.77%)</title><rect x="17.5439%" y="885" width="8.7719%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="5"/><text x="17.7939%" y="895.50">`0x7FFF98652..</text></g><g><title>`0x7FFF9874020E (5 samples, 8.77%)</title><rect x="17.5439%" y="869" width="8.7719%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="5"/><text x="17.7939%" y="879.50">`0x7FFF98740..</text></g><g><title>`0x7FFF95CC26A2 (1 samples, 1.75%)</title><rect x="24.5614%" y="853" width="1.7544%" height="15" fill="rgb(213,79,30)" fg:x="14" fg:w="1"/><text x="24.8114%" y="863.50"></text></g><g><title>`0x7FFF95C315BC (1 samples, 1.75%)</title><rect x="24.5614%" y="837" width="1.7544%" height="15" fill="rgb(246,177,23)" fg:x="14" fg:w="1"/><text x="24.8114%" y="847.50"></text></g><g><title>`0x7FFF985E3883 (1 samples, 1.75%)</title><rect x="24.5614%" y="821" width="1.7544%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="1"/><text x="24.8114%" y="831.50"></text></g><g><title>`0x7FFF985E3A11 (1 samples, 1.75%)</title><rect x="24.5614%" y="805" width="1.7544%" height="15" fill="rgb(216,154,8)" fg:x="14" fg:w="1"/><text x="24.8114%" y="815.50"></text></g><g><title>`0x7FFF985E2772 (1 samples, 1.75%)</title><rect x="24.5614%" y="789" width="1.7544%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="1"/><text x="24.8114%" y="799.50"></text></g><g><title>`0x7FFF98745884 (1 samples, 1.75%)</title><rect x="24.5614%" y="773" width="1.7544%" height="15" fill="rgb(251,115,12)" fg:x="14" fg:w="1"/><text x="24.8114%" y="783.50"></text></g><g><title>`0x7FFF9864548B (9 samples, 15.79%)</title><rect x="12.2807%" y="1029" width="15.7895%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="9"/><text x="12.5307%" y="1039.50">`0x7FFF9864548B</text></g><g><title>`0x7FFF986BB6F9 (1 samples, 1.75%)</title><rect x="26.3158%" y="1013" width="1.7544%" height="15" fill="rgb(233,84,52)" fg:x="15" fg:w="1"/><text x="26.5658%" y="1023.50"></text></g><g><title>`0x7FFF9864F930 (1 samples, 1.75%)</title><rect x="26.3158%" y="997" width="1.7544%" height="15" fill="rgb(207,117,47)" fg:x="15" fg:w="1"/><text x="26.5658%" y="1007.50"></text></g><g><title>`0x7FFF9862280B (1 samples, 1.75%)</title><rect x="26.3158%" y="981" width="1.7544%" height="15" fill="rgb(249,43,39)" fg:x="15" fg:w="1"/><text x="26.5658%" y="991.50"></text></g><g><title>`0x7FFF986229DD (1 samples, 1.75%)</title><rect x="26.3158%" y="965" width="1.7544%" height="15" fill="rgb(209,38,44)" fg:x="15" fg:w="1"/><text x="26.5658%" y="975.50"></text></g><g><title>`0x7FFF98622283 (1 samples, 1.75%)</title><rect x="26.3158%" y="949" width="1.7544%" height="15" fill="rgb(236,212,23)" fg:x="15" fg:w="1"/><text x="26.5658%" y="959.50"></text></g><g><title>`0x7FFF985E8E56 (1 samples, 1.75%)</title><rect x="26.3158%" y="933" width="1.7544%" height="15" fill="rgb(242,79,21)" fg:x="15" fg:w="1"/><text x="26.5658%" y="943.50"></text></g><g><title>`0x7FFF985E86D4 (1 samples, 1.75%)</title><rect x="26.3158%" y="917" width="1.7544%" height="15" fill="rgb(211,96,35)" fg:x="15" fg:w="1"/><text x="26.5658%" y="927.50"></text></g><g><title>`0x7FFF986596FF (1 samples, 1.75%)</title><rect x="26.3158%" y="901" width="1.7544%" height="15" fill="rgb(253,215,40)" fg:x="15" fg:w="1"/><text x="26.5658%" y="911.50"></text></g><g><title>`0x7FFF985E9B23 (1 samples, 1.75%)</title><rect x="28.0702%" y="1013" width="1.7544%" height="15" fill="rgb(211,81,21)" fg:x="16" fg:w="1"/><text x="28.3202%" y="1023.50"></text></g><g><title>`0x7FFF98616C93 (1 samples, 1.75%)</title><rect x="28.0702%" y="997" width="1.7544%" height="15" fill="rgb(208,190,38)" fg:x="16" fg:w="1"/><text x="28.3202%" y="1007.50"></text></g><g><title>`0x7FFF96815B2F (1 samples, 1.75%)</title><rect x="28.0702%" y="981" width="1.7544%" height="15" fill="rgb(235,213,38)" fg:x="16" fg:w="1"/><text x="28.3202%" y="991.50"></text></g><g><title>`0x7FFF96815C1B (1 samples, 1.75%)</title><rect x="28.0702%" y="965" width="1.7544%" height="15" fill="rgb(237,122,38)" fg:x="16" fg:w="1"/><text x="28.3202%" y="975.50"></text></g><g><title>`0x7FFF95C3E941 (1 samples, 1.75%)</title><rect x="28.0702%" y="949" width="1.7544%" height="15" fill="rgb(244,218,35)" fg:x="16" fg:w="1"/><text x="28.3202%" y="959.50"></text></g><g><title>`0x7FFF98616E75 (1 samples, 1.75%)</title><rect x="28.0702%" y="933" width="1.7544%" height="15" fill="rgb(240,68,47)" fg:x="16" fg:w="1"/><text x="28.3202%" y="943.50"></text></g><g><title>`0x7FFF96828649 (1 samples, 1.75%)</title><rect x="28.0702%" y="917" width="1.7544%" height="15" fill="rgb(210,16,53)" fg:x="16" fg:w="1"/><text x="28.3202%" y="927.50"></text></g><g><title>`0x7FFF96828778 (1 samples, 1.75%)</title><rect x="28.0702%" y="901" width="1.7544%" height="15" fill="rgb(235,124,12)" fg:x="16" fg:w="1"/><text x="28.3202%" y="911.50"></text></g><g><title>`0x7FFF96851D17 (1 samples, 1.75%)</title><rect x="28.0702%" y="885" width="1.7544%" height="15" fill="rgb(224,169,11)" fg:x="16" fg:w="1"/><text x="28.3202%" y="895.50"></text></g><g><title>`0x7FFF96851B64 (1 samples, 1.75%)</title><rect x="28.0702%" y="869" width="1.7544%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="1"/><text x="28.3202%" y="879.50"></text></g><g><title>`0x7FFF96824ACD (1 samples, 1.75%)</title><rect x="28.0702%" y="853" width="1.7544%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="1"/><text x="28.3202%" y="863.50"></text></g><g><title>`0x7FFF96842A6B (1 samples, 1.75%)</title><rect x="28.0702%" y="837" width="1.7544%" height="15" fill="rgb(230,116,27)" fg:x="16" fg:w="1"/><text x="28.3202%" y="847.50"></text></g><g><title>`0x7FFF96842B44 (1 samples, 1.75%)</title><rect x="28.0702%" y="821" width="1.7544%" height="15" fill="rgb(228,99,48)" fg:x="16" fg:w="1"/><text x="28.3202%" y="831.50"></text></g><g><title>`0x7FFF96876010 (1 samples, 1.75%)</title><rect x="28.0702%" y="805" width="1.7544%" height="15" fill="rgb(253,11,6)" fg:x="16" fg:w="1"/><text x="28.3202%" y="815.50"></text></g><g><title>`0x7FFF98645595 (2 samples, 3.51%)</title><rect x="28.0702%" y="1029" width="3.5088%" height="15" fill="rgb(247,143,39)" fg:x="16" fg:w="2"/><text x="28.3202%" y="1039.50">`0x..</text></g><g><title>`0x7FFF985E9E0E (1 samples, 1.75%)</title><rect x="29.8246%" y="1013" width="1.7544%" height="15" fill="rgb(236,97,10)" fg:x="17" fg:w="1"/><text x="30.0746%" y="1023.50"></text></g><g><title>`0x7FFF985EBC3E (1 samples, 1.75%)</title><rect x="29.8246%" y="997" width="1.7544%" height="15" fill="rgb(233,208,19)" fg:x="17" fg:w="1"/><text x="30.0746%" y="1007.50"></text></g><g><title>`0x7FFF9864B611 (1 samples, 1.75%)</title><rect x="29.8246%" y="981" width="1.7544%" height="15" fill="rgb(216,164,2)" fg:x="17" fg:w="1"/><text x="30.0746%" y="991.50"></text></g><g><title>`0x7FFF9864BBB8 (1 samples, 1.75%)</title><rect x="29.8246%" y="965" width="1.7544%" height="15" fill="rgb(220,129,5)" fg:x="17" fg:w="1"/><text x="30.0746%" y="975.50"></text></g><g><title>`0x7FFF985E9FB7 (1 samples, 1.75%)</title><rect x="29.8246%" y="949" width="1.7544%" height="15" fill="rgb(242,17,10)" fg:x="17" fg:w="1"/><text x="30.0746%" y="959.50"></text></g><g><title>`0x7FFF986C7F86 (1 samples, 1.75%)</title><rect x="29.8246%" y="933" width="1.7544%" height="15" fill="rgb(242,107,0)" fg:x="17" fg:w="1"/><text x="30.0746%" y="943.50"></text></g><g><title>`0x7FFF98672171 (1 samples, 1.75%)</title><rect x="29.8246%" y="917" width="1.7544%" height="15" fill="rgb(251,28,31)" fg:x="17" fg:w="1"/><text x="30.0746%" y="927.50"></text></g><g><title>`0x7FFF98744D84 (1 samples, 1.75%)</title><rect x="29.8246%" y="901" width="1.7544%" height="15" fill="rgb(233,223,10)" fg:x="17" fg:w="1"/><text x="30.0746%" y="911.50"></text></g><g><title>`0x7FFF9864ED40 (1 samples, 1.75%)</title><rect x="31.5789%" y="949" width="1.7544%" height="15" fill="rgb(215,21,27)" fg:x="18" fg:w="1"/><text x="31.8289%" y="959.50"></text></g><g><title>`0x7FFF9864F073 (1 samples, 1.75%)</title><rect x="31.5789%" y="933" width="1.7544%" height="15" fill="rgb(232,23,21)" fg:x="18" fg:w="1"/><text x="31.8289%" y="943.50"></text></g><g><title>`0x7FFF98742574 (1 samples, 1.75%)</title><rect x="31.5789%" y="917" width="1.7544%" height="15" fill="rgb(244,5,23)" fg:x="18" fg:w="1"/><text x="31.8289%" y="927.50"></text></g><g><title>`0x7FFF9864559D (2 samples, 3.51%)</title><rect x="31.5789%" y="1029" width="3.5088%" height="15" fill="rgb(226,81,46)" fg:x="18" fg:w="2"/><text x="31.8289%" y="1039.50">`0x..</text></g><g><title>`0x7FFF9861CE47 (2 samples, 3.51%)</title><rect x="31.5789%" y="1013" width="3.5088%" height="15" fill="rgb(247,70,30)" fg:x="18" fg:w="2"/><text x="31.8289%" y="1023.50">`0x..</text></g><g><title>`0x7FFF9865C27A (2 samples, 3.51%)</title><rect x="31.5789%" y="997" width="3.5088%" height="15" fill="rgb(212,68,19)" fg:x="18" fg:w="2"/><text x="31.8289%" y="1007.50">`0x..</text></g><g><title>`0x7FFF9864E111 (2 samples, 3.51%)</title><rect x="31.5789%" y="981" width="3.5088%" height="15" fill="rgb(240,187,13)" fg:x="18" fg:w="2"/><text x="31.8289%" y="991.50">`0x..</text></g><g><title>`0x7FFF9864E7E9 (2 samples, 3.51%)</title><rect x="31.5789%" y="965" width="3.5088%" height="15" fill="rgb(223,113,26)" fg:x="18" fg:w="2"/><text x="31.8289%" y="975.50">`0x..</text></g><g><title>`0x7FFF9864EE1A (1 samples, 1.75%)</title><rect x="33.3333%" y="949" width="1.7544%" height="15" fill="rgb(206,192,2)" fg:x="19" fg:w="1"/><text x="33.5833%" y="959.50"></text></g><g><title>`0x7FFF98659666 (1 samples, 1.75%)</title><rect x="33.3333%" y="933" width="1.7544%" height="15" fill="rgb(241,108,4)" fg:x="19" fg:w="1"/><text x="33.5833%" y="943.50"></text></g><g><title>`0x7FFF98659AC9 (1 samples, 1.75%)</title><rect x="33.3333%" y="917" width="1.7544%" height="15" fill="rgb(247,173,49)" fg:x="19" fg:w="1"/><text x="33.5833%" y="927.50"></text></g><g><title>`0x7FFF98707C21 (1 samples, 1.75%)</title><rect x="33.3333%" y="901" width="1.7544%" height="15" fill="rgb(224,114,35)" fg:x="19" fg:w="1"/><text x="33.5833%" y="911.50"></text></g><g><title>`0x7FFF98707CA8 (1 samples, 1.75%)</title><rect x="33.3333%" y="885" width="1.7544%" height="15" fill="rgb(245,159,27)" fg:x="19" fg:w="1"/><text x="33.5833%" y="895.50"></text></g><g><title>`0x7FFF9870E6DF (1 samples, 1.75%)</title><rect x="33.3333%" y="869" width="1.7544%" height="15" fill="rgb(245,172,44)" fg:x="19" fg:w="1"/><text x="33.5833%" y="879.50"></text></g><g><title>`0x7FFF987114E9 (1 samples, 1.75%)</title><rect x="33.3333%" y="853" width="1.7544%" height="15" fill="rgb(236,23,11)" fg:x="19" fg:w="1"/><text x="33.5833%" y="863.50"></text></g><g><title>`0x7FFF986BA6FE (1 samples, 1.75%)</title><rect x="33.3333%" y="837" width="1.7544%" height="15" fill="rgb(205,117,38)" fg:x="19" fg:w="1"/><text x="33.5833%" y="847.50"></text></g><g><title>`0x7FFF9861BC7A (1 samples, 1.75%)</title><rect x="35.0877%" y="997" width="1.7544%" height="15" fill="rgb(237,72,25)" fg:x="20" fg:w="1"/><text x="35.3377%" y="1007.50"></text></g><g><title>`0x7FFF9865193C (1 samples, 1.75%)</title><rect x="35.0877%" y="981" width="1.7544%" height="15" fill="rgb(244,70,9)" fg:x="20" fg:w="1"/><text x="35.3377%" y="991.50"></text></g><g><title>`0x7FFF986529CE (1 samples, 1.75%)</title><rect x="35.0877%" y="965" width="1.7544%" height="15" fill="rgb(217,125,39)" fg:x="20" fg:w="1"/><text x="35.3377%" y="975.50"></text></g><g><title>`0x7FFF9874020E (1 samples, 1.75%)</title><rect x="35.0877%" y="949" width="1.7544%" height="15" fill="rgb(235,36,10)" fg:x="20" fg:w="1"/><text x="35.3377%" y="959.50"></text></g><g><title>`0x7FFF961B8562 (1 samples, 1.75%)</title><rect x="35.0877%" y="933" width="1.7544%" height="15" fill="rgb(251,123,47)" fg:x="20" fg:w="1"/><text x="35.3377%" y="943.50"></text></g><g><title>`0x7FFF961B88E8 (1 samples, 1.75%)</title><rect x="35.0877%" y="917" width="1.7544%" height="15" fill="rgb(221,13,13)" fg:x="20" fg:w="1"/><text x="35.3377%" y="927.50"></text></g><g><title>`0x7FFF961BD5FF (1 samples, 1.75%)</title><rect x="35.0877%" y="901" width="1.7544%" height="15" fill="rgb(238,131,9)" fg:x="20" fg:w="1"/><text x="35.3377%" y="911.50"></text></g><g><title>`0x7FFF95BC99EC (1 samples, 1.75%)</title><rect x="35.0877%" y="885" width="1.7544%" height="15" fill="rgb(211,50,8)" fg:x="20" fg:w="1"/><text x="35.3377%" y="895.50"></text></g><g><title>`0x7FFF95BC9AD9 (1 samples, 1.75%)</title><rect x="35.0877%" y="869" width="1.7544%" height="15" fill="rgb(245,182,24)" fg:x="20" fg:w="1"/><text x="35.3377%" y="879.50"></text></g><g><title>`0x7FFF95D41986 (1 samples, 1.75%)</title><rect x="35.0877%" y="853" width="1.7544%" height="15" fill="rgb(242,14,37)" fg:x="20" fg:w="1"/><text x="35.3377%" y="863.50"></text></g><g><title>`0x7FFF98615FCE (21 samples, 36.84%)</title><rect x="1.7544%" y="1077" width="36.8421%" height="15" fill="rgb(246,228,12)" fg:x="1" fg:w="21"/><text x="2.0044%" y="1087.50">`0x7FFF98615FCE</text></g><g><title>`0x7FFF9864364E (21 samples, 36.84%)</title><rect x="1.7544%" y="1061" width="36.8421%" height="15" fill="rgb(213,55,15)" fg:x="1" fg:w="21"/><text x="2.0044%" y="1071.50">`0x7FFF9864364E</text></g><g><title>`0x7FFF98643864 (21 samples, 36.84%)</title><rect x="1.7544%" y="1045" width="36.8421%" height="15" fill="rgb(209,9,3)" fg:x="1" fg:w="21"/><text x="2.0044%" y="1055.50">`0x7FFF98643864</text></g><g><title>`0x7FFF986456AC (2 samples, 3.51%)</title><rect x="35.0877%" y="1029" width="3.5088%" height="15" fill="rgb(230,59,30)" fg:x="20" fg:w="2"/><text x="35.3377%" y="1039.50">`0x..</text></g><g><title>`0x7FFF9861BCA6 (2 samples, 3.51%)</title><rect x="35.0877%" y="1013" width="3.5088%" height="15" fill="rgb(209,121,21)" fg:x="20" fg:w="2"/><text x="35.3377%" y="1023.50">`0x..</text></g><g><title>`0x7FFF9861BCA6 (1 samples, 1.75%)</title><rect x="36.8421%" y="997" width="1.7544%" height="15" fill="rgb(220,109,13)" fg:x="21" fg:w="1"/><text x="37.0921%" y="1007.50"></text></g><g><title>`0x7FFF9861BC7A (1 samples, 1.75%)</title><rect x="36.8421%" y="981" width="1.7544%" height="15" fill="rgb(232,18,1)" fg:x="21" fg:w="1"/><text x="37.0921%" y="991.50"></text></g><g><title>`0x7FFF9865193C (1 samples, 1.75%)</title><rect x="36.8421%" y="965" width="1.7544%" height="15" fill="rgb(215,41,42)" fg:x="21" fg:w="1"/><text x="37.0921%" y="975.50"></text></g><g><title>`0x7FFF986529CE (1 samples, 1.75%)</title><rect x="36.8421%" y="949" width="1.7544%" height="15" fill="rgb(224,123,36)" fg:x="21" fg:w="1"/><text x="37.0921%" y="959.50"></text></g><g><title>`0x7FFF9874020E (1 samples, 1.75%)</title><rect x="36.8421%" y="933" width="1.7544%" height="15" fill="rgb(240,125,3)" fg:x="21" fg:w="1"/><text x="37.0921%" y="943.50"></text></g><g><title>`0x7FFF95FA6E26 (1 samples, 1.75%)</title><rect x="36.8421%" y="917" width="1.7544%" height="15" fill="rgb(205,98,50)" fg:x="21" fg:w="1"/><text x="37.0921%" y="927.50"></text></g><g><title>`0x7FFF9600AD56 (1 samples, 1.75%)</title><rect x="36.8421%" y="901" width="1.7544%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="1"/><text x="37.0921%" y="911.50"></text></g><g><title>`0x7FFF95F9A75A (1 samples, 1.75%)</title><rect x="36.8421%" y="885" width="1.7544%" height="15" fill="rgb(238,207,15)" fg:x="21" fg:w="1"/><text x="37.0921%" y="895.50"></text></g><g><title>`0x7FFF95F993BD (1 samples, 1.75%)</title><rect x="36.8421%" y="869" width="1.7544%" height="15" fill="rgb(213,199,42)" fg:x="21" fg:w="1"/><text x="37.0921%" y="879.50"></text></g><g><title>`0x7FFF95C3DD10 (1 samples, 1.75%)</title><rect x="36.8421%" y="853" width="1.7544%" height="15" fill="rgb(235,201,11)" fg:x="21" fg:w="1"/><text x="37.0921%" y="863.50"></text></g><g><title>`0x7FFF9861C320 (1 samples, 1.75%)</title><rect x="38.5965%" y="1077" width="1.7544%" height="15" fill="rgb(207,46,11)" fg:x="22" fg:w="1"/><text x="38.8465%" y="1087.50"></text></g><g><title>`0x7FFF986729F1 (1 samples, 1.75%)</title><rect x="40.3509%" y="1045" width="1.7544%" height="15" fill="rgb(241,35,35)" fg:x="23" fg:w="1"/><text x="40.6009%" y="1055.50"></text></g><g><title>`0x7FFF9865B400 (1 samples, 1.75%)</title><rect x="40.3509%" y="1029" width="1.7544%" height="15" fill="rgb(243,32,47)" fg:x="23" fg:w="1"/><text x="40.6009%" y="1039.50"></text></g><g><title>`0x7FFF9865C341 (1 samples, 1.75%)</title><rect x="40.3509%" y="1013" width="1.7544%" height="15" fill="rgb(247,202,23)" fg:x="23" fg:w="1"/><text x="40.6009%" y="1023.50"></text></g><g><title>`0x7FFF98633DA0 (1 samples, 1.75%)</title><rect x="40.3509%" y="997" width="1.7544%" height="15" fill="rgb(219,102,11)" fg:x="23" fg:w="1"/><text x="40.6009%" y="1007.50"></text></g><g><title>`0x7FFF960032B2 (1 samples, 1.75%)</title><rect x="42.1053%" y="1029" width="1.7544%" height="15" fill="rgb(243,110,44)" fg:x="24" fg:w="1"/><text x="42.3553%" y="1039.50"></text></g><g><title>soul_lang_rust.exe`pre_c_initialization() (1 samples, 1.75%)</title><rect x="42.1053%" y="1013" width="1.7544%" height="15" fill="rgb(222,74,54)" fg:x="24" fg:w="1"/><text x="42.3553%" y="1023.50"></text></g><g><title>`0x7FFF95FCB678 (1 samples, 1.75%)</title><rect x="42.1053%" y="997" width="1.7544%" height="15" fill="rgb(216,99,12)" fg:x="24" fg:w="1"/><text x="42.3553%" y="1007.50"></text></g><g><title>`0x7FFF95FCBBE7 (1 samples, 1.75%)</title><rect x="42.1053%" y="981" width="1.7544%" height="15" fill="rgb(226,22,26)" fg:x="24" fg:w="1"/><text x="42.3553%" y="991.50"></text></g><g><title>`0x7FFF95FCA7E4 (1 samples, 1.75%)</title><rect x="42.1053%" y="965" width="1.7544%" height="15" fill="rgb(217,163,10)" fg:x="24" fg:w="1"/><text x="42.3553%" y="975.50"></text></g><g><title>`0x7FFF95FCA86E (1 samples, 1.75%)</title><rect x="42.1053%" y="949" width="1.7544%" height="15" fill="rgb(213,25,53)" fg:x="24" fg:w="1"/><text x="42.3553%" y="959.50"></text></g><g><title>`0x7FFF95FA423B (1 samples, 1.75%)</title><rect x="42.1053%" y="933" width="1.7544%" height="15" fill="rgb(252,105,26)" fg:x="24" fg:w="1"/><text x="42.3553%" y="943.50"></text></g><g><title>`0x7FFF96006225 (1 samples, 1.75%)</title><rect x="42.1053%" y="917" width="1.7544%" height="15" fill="rgb(220,39,43)" fg:x="24" fg:w="1"/><text x="42.3553%" y="927.50"></text></g><g><title>`0x7FFF95BB2AC6 (1 samples, 1.75%)</title><rect x="42.1053%" y="901" width="1.7544%" height="15" fill="rgb(229,68,48)" fg:x="24" fg:w="1"/><text x="42.3553%" y="911.50"></text></g><g><title>`0x7FFF98635CE7 (1 samples, 1.75%)</title><rect x="42.1053%" y="885" width="1.7544%" height="15" fill="rgb(252,8,32)" fg:x="24" fg:w="1"/><text x="42.3553%" y="895.50"></text></g><g><title>`0x7FFF9865952B (1 samples, 1.75%)</title><rect x="42.1053%" y="869" width="1.7544%" height="15" fill="rgb(223,20,43)" fg:x="24" fg:w="1"/><text x="42.3553%" y="879.50"></text></g><g><title>`0x7FFF98650564 (1 samples, 1.75%)</title><rect x="43.8596%" y="869" width="1.7544%" height="15" fill="rgb(229,81,49)" fg:x="25" fg:w="1"/><text x="44.1096%" y="879.50"></text></g><g><title>`0x7FFF98742714 (1 samples, 1.75%)</title><rect x="43.8596%" y="853" width="1.7544%" height="15" fill="rgb(236,28,36)" fg:x="25" fg:w="1"/><text x="44.1096%" y="863.50"></text></g><g><title>`0x7FFF985E8860 (2 samples, 3.51%)</title><rect x="43.8596%" y="917" width="3.5088%" height="15" fill="rgb(249,185,26)" fg:x="25" fg:w="2"/><text x="44.1096%" y="927.50">`0x..</text></g><g><title>`0x7FFF9865C354 (2 samples, 3.51%)</title><rect x="43.8596%" y="901" width="3.5088%" height="15" fill="rgb(249,174,33)" fg:x="25" fg:w="2"/><text x="44.1096%" y="911.50">`0x..</text></g><g><title>`0x7FFF9864E52D (2 samples, 3.51%)</title><rect x="43.8596%" y="885" width="3.5088%" height="15" fill="rgb(233,201,37)" fg:x="25" fg:w="2"/><text x="44.1096%" y="895.50">`0x..</text></g><g><title>`0x7FFF9865065C (1 samples, 1.75%)</title><rect x="45.6140%" y="869" width="1.7544%" height="15" fill="rgb(221,78,26)" fg:x="26" fg:w="1"/><text x="45.8640%" y="879.50"></text></g><g><title>`0x7FFF9864BBB8 (1 samples, 1.75%)</title><rect x="45.6140%" y="853" width="1.7544%" height="15" fill="rgb(250,127,30)" fg:x="26" fg:w="1"/><text x="45.8640%" y="863.50"></text></g><g><title>`0x7FFF985E9F82 (1 samples, 1.75%)</title><rect x="45.6140%" y="837" width="1.7544%" height="15" fill="rgb(230,49,44)" fg:x="26" fg:w="1"/><text x="45.8640%" y="847.50"></text></g><g><title>`0x7FFF98633C99 (1 samples, 1.75%)</title><rect x="45.6140%" y="821" width="1.7544%" height="15" fill="rgb(229,67,23)" fg:x="26" fg:w="1"/><text x="45.8640%" y="831.50"></text></g><g><title>`0x7FFF96030046 (3 samples, 5.26%)</title><rect x="43.8596%" y="1029" width="5.2632%" height="15" fill="rgb(249,83,47)" fg:x="25" fg:w="3"/><text x="44.1096%" y="1039.50">`0x7FF..</text></g><g><title>`0x7FFF9601553D (3 samples, 5.26%)</title><rect x="43.8596%" y="1013" width="5.2632%" height="15" fill="rgb(215,43,3)" fg:x="25" fg:w="3"/><text x="44.1096%" y="1023.50">`0x7FF..</text></g><g><title>`0x7FFF95FA423B (3 samples, 5.26%)</title><rect x="43.8596%" y="997" width="5.2632%" height="15" fill="rgb(238,154,13)" fg:x="25" fg:w="3"/><text x="44.1096%" y="1007.50">`0x7FF..</text></g><g><title>`0x7FFF96006225 (3 samples, 5.26%)</title><rect x="43.8596%" y="981" width="5.2632%" height="15" fill="rgb(219,56,2)" fg:x="25" fg:w="3"/><text x="44.1096%" y="991.50">`0x7FF..</text></g><g><title>`0x7FFF95BB2AC6 (3 samples, 5.26%)</title><rect x="43.8596%" y="965" width="5.2632%" height="15" fill="rgb(233,0,4)" fg:x="25" fg:w="3"/><text x="44.1096%" y="975.50">`0x7FF..</text></g><g><title>`0x7FFF98635D80 (3 samples, 5.26%)</title><rect x="43.8596%" y="949" width="5.2632%" height="15" fill="rgb(235,30,7)" fg:x="25" fg:w="3"/><text x="44.1096%" y="959.50">`0x7FF..</text></g><g><title>`0x7FFF985E84E0 (3 samples, 5.26%)</title><rect x="43.8596%" y="933" width="5.2632%" height="15" fill="rgb(250,79,13)" fg:x="25" fg:w="3"/><text x="44.1096%" y="943.50">`0x7FF..</text></g><g><title>`0x7FFF985E88D4 (1 samples, 1.75%)</title><rect x="47.3684%" y="917" width="1.7544%" height="15" fill="rgb(211,146,34)" fg:x="27" fg:w="1"/><text x="47.6184%" y="927.50"></text></g><g><title>`0x7FFF9861AE03 (1 samples, 1.75%)</title><rect x="47.3684%" y="901" width="1.7544%" height="15" fill="rgb(228,22,38)" fg:x="27" fg:w="1"/><text x="47.6184%" y="911.50"></text></g><g><title>`0x7FFF9861BCA6 (1 samples, 1.75%)</title><rect x="47.3684%" y="885" width="1.7544%" height="15" fill="rgb(235,168,5)" fg:x="27" fg:w="1"/><text x="47.6184%" y="895.50"></text></g><g><title>`0x7FFF9861BC7A (1 samples, 1.75%)</title><rect x="47.3684%" y="869" width="1.7544%" height="15" fill="rgb(221,155,16)" fg:x="27" fg:w="1"/><text x="47.6184%" y="879.50"></text></g><g><title>`0x7FFF9865193C (1 samples, 1.75%)</title><rect x="47.3684%" y="853" width="1.7544%" height="15" fill="rgb(215,215,53)" fg:x="27" fg:w="1"/><text x="47.6184%" y="863.50"></text></g><g><title>`0x7FFF986529CE (1 samples, 1.75%)</title><rect x="47.3684%" y="837" width="1.7544%" height="15" fill="rgb(223,4,10)" fg:x="27" fg:w="1"/><text x="47.6184%" y="847.50"></text></g><g><title>`0x7FFF9874020E (1 samples, 1.75%)</title><rect x="47.3684%" y="821" width="1.7544%" height="15" fill="rgb(234,103,6)" fg:x="27" fg:w="1"/><text x="47.6184%" y="831.50"></text></g><g><title>`0x7FFF97267AAF (1 samples, 1.75%)</title><rect x="47.3684%" y="805" width="1.7544%" height="15" fill="rgb(227,97,0)" fg:x="27" fg:w="1"/><text x="47.6184%" y="815.50"></text></g><g><title>`0x7FFF97284762 (1 samples, 1.75%)</title><rect x="47.3684%" y="789" width="1.7544%" height="15" fill="rgb(234,150,53)" fg:x="27" fg:w="1"/><text x="47.6184%" y="799.50"></text></g><g><title>`0x7FFF972848D0 (1 samples, 1.75%)</title><rect x="47.3684%" y="773" width="1.7544%" height="15" fill="rgb(228,201,54)" fg:x="27" fg:w="1"/><text x="47.6184%" y="783.50"></text></g><g><title>`0x7FFF9727D89B (1 samples, 1.75%)</title><rect x="47.3684%" y="757" width="1.7544%" height="15" fill="rgb(222,22,37)" fg:x="27" fg:w="1"/><text x="47.6184%" y="767.50"></text></g><g><title>`0x7FFF9727D6B0 (1 samples, 1.75%)</title><rect x="47.3684%" y="741" width="1.7544%" height="15" fill="rgb(237,53,32)" fg:x="27" fg:w="1"/><text x="47.6184%" y="751.50"></text></g><g><title>`0x7FFF985EF164 (1 samples, 1.75%)</title><rect x="47.3684%" y="725" width="1.7544%" height="15" fill="rgb(233,25,53)" fg:x="27" fg:w="1"/><text x="47.6184%" y="735.50"></text></g><g><title>`0x7FFF985EF591 (1 samples, 1.75%)</title><rect x="47.3684%" y="709" width="1.7544%" height="15" fill="rgb(210,40,34)" fg:x="27" fg:w="1"/><text x="47.6184%" y="719.50"></text></g><g><title>`0x7FFF98625557 (1 samples, 1.75%)</title><rect x="47.3684%" y="693" width="1.7544%" height="15" fill="rgb(241,220,44)" fg:x="27" fg:w="1"/><text x="47.6184%" y="703.50"></text></g><g><title>`0x7FFF98627A07 (1 samples, 1.75%)</title><rect x="47.3684%" y="677" width="1.7544%" height="15" fill="rgb(235,28,35)" fg:x="27" fg:w="1"/><text x="47.6184%" y="687.50"></text></g><g><title>`0x7FFF9861245B (1 samples, 1.75%)</title><rect x="47.3684%" y="661" width="1.7544%" height="15" fill="rgb(210,56,17)" fg:x="27" fg:w="1"/><text x="47.6184%" y="671.50"></text></g><g><title>`0x7FFF986125DA (1 samples, 1.75%)</title><rect x="47.3684%" y="645" width="1.7544%" height="15" fill="rgb(224,130,29)" fg:x="27" fg:w="1"/><text x="47.6184%" y="655.50"></text></g><g><title>`0x7FFF985EF164 (1 samples, 1.75%)</title><rect x="47.3684%" y="629" width="1.7544%" height="15" fill="rgb(235,212,8)" fg:x="27" fg:w="1"/><text x="47.6184%" y="639.50"></text></g><g><title>`0x7FFF985EF591 (1 samples, 1.75%)</title><rect x="47.3684%" y="613" width="1.7544%" height="15" fill="rgb(223,33,50)" fg:x="27" fg:w="1"/><text x="47.6184%" y="623.50"></text></g><g><title>`0x7FFF986269A2 (1 samples, 1.75%)</title><rect x="47.3684%" y="597" width="1.7544%" height="15" fill="rgb(219,149,13)" fg:x="27" fg:w="1"/><text x="47.6184%" y="607.50"></text></g><g><title>`0x7FFF98627D9B (1 samples, 1.75%)</title><rect x="47.3684%" y="581" width="1.7544%" height="15" fill="rgb(250,156,29)" fg:x="27" fg:w="1"/><text x="47.6184%" y="591.50"></text></g><g><title>`0x7FFF985F6083 (1 samples, 1.75%)</title><rect x="47.3684%" y="565" width="1.7544%" height="15" fill="rgb(216,193,19)" fg:x="27" fg:w="1"/><text x="47.6184%" y="575.50"></text></g><g><title>`0x7FFF96030093 (1 samples, 1.75%)</title><rect x="49.1228%" y="1029" width="1.7544%" height="15" fill="rgb(216,135,14)" fg:x="28" fg:w="1"/><text x="49.3728%" y="1039.50"></text></g><g><title>`0x7FFF968318AB (1 samples, 1.75%)</title><rect x="49.1228%" y="1013" width="1.7544%" height="15" fill="rgb(241,47,5)" fg:x="28" fg:w="1"/><text x="49.3728%" y="1023.50"></text></g><g><title>`0x7FFF9861C504 (1 samples, 1.75%)</title><rect x="49.1228%" y="997" width="1.7544%" height="15" fill="rgb(233,42,35)" fg:x="28" fg:w="1"/><text x="49.3728%" y="1007.50"></text></g><g><title>`0x7FFF9861DC2F (1 samples, 1.75%)</title><rect x="49.1228%" y="981" width="1.7544%" height="15" fill="rgb(231,13,6)" fg:x="28" fg:w="1"/><text x="49.3728%" y="991.50"></text></g><g><title>`0x7FFF986529CE (1 samples, 1.75%)</title><rect x="49.1228%" y="965" width="1.7544%" height="15" fill="rgb(207,181,40)" fg:x="28" fg:w="1"/><text x="49.3728%" y="975.50"></text></g><g><title>`0x7FFF9874020E (1 samples, 1.75%)</title><rect x="49.1228%" y="949" width="1.7544%" height="15" fill="rgb(254,173,49)" fg:x="28" fg:w="1"/><text x="49.3728%" y="959.50"></text></g><g><title>`0x7FFF95CC26FD (1 samples, 1.75%)</title><rect x="49.1228%" y="933" width="1.7544%" height="15" fill="rgb(221,1,38)" fg:x="28" fg:w="1"/><text x="49.3728%" y="943.50"></text></g><g><title>`0x7FFF95C97D7F (1 samples, 1.75%)</title><rect x="49.1228%" y="917" width="1.7544%" height="15" fill="rgb(206,124,46)" fg:x="28" fg:w="1"/><text x="49.3728%" y="927.50"></text></g><g><title>`0x7FFF95CCAAEA (1 samples, 1.75%)</title><rect x="49.1228%" y="901" width="1.7544%" height="15" fill="rgb(249,21,11)" fg:x="28" fg:w="1"/><text x="49.3728%" y="911.50"></text></g><g><title>`0x7FFF95BF8109 (1 samples, 1.75%)</title><rect x="49.1228%" y="885" width="1.7544%" height="15" fill="rgb(222,201,40)" fg:x="28" fg:w="1"/><text x="49.3728%" y="895.50"></text></g><g><title>`0x7FFF98675930 (1 samples, 1.75%)</title><rect x="49.1228%" y="869" width="1.7544%" height="15" fill="rgb(235,61,29)" fg:x="28" fg:w="1"/><text x="49.3728%" y="879.50"></text></g><g><title>`0x7FFF985F4518 (1 samples, 1.75%)</title><rect x="49.1228%" y="853" width="1.7544%" height="15" fill="rgb(219,207,3)" fg:x="28" fg:w="1"/><text x="49.3728%" y="863.50"></text></g><g><title>`0x7FFF985F5CD3 (1 samples, 1.75%)</title><rect x="49.1228%" y="837" width="1.7544%" height="15" fill="rgb(222,56,46)" fg:x="28" fg:w="1"/><text x="49.3728%" y="847.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="50.8772%" y="853" width="1.7544%" height="15" fill="rgb(239,76,54)" fg:x="29" fg:w="1"/><text x="51.1272%" y="863.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="50.8772%" y="837" width="1.7544%" height="15" fill="rgb(231,124,27)" fg:x="29" fg:w="1"/><text x="51.1272%" y="847.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec (1 samples, 1.75%)</title><rect x="50.8772%" y="821" width="1.7544%" height="15" fill="rgb(249,195,6)" fg:x="29" fg:w="1"/><text x="51.1272%" y="831.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1 samples, 1.75%)</title><rect x="50.8772%" y="805" width="1.7544%" height="15" fill="rgb(237,174,47)" fg:x="29" fg:w="1"/><text x="51.1272%" y="815.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (1 samples, 1.75%)</title><rect x="50.8772%" y="789" width="1.7544%" height="15" fill="rgb(206,201,31)" fg:x="29" fg:w="1"/><text x="51.1272%" y="799.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place&lt;soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder&gt; (1 samples, 1.75%)</title><rect x="50.8772%" y="773" width="1.7544%" height="15" fill="rgb(231,57,52)" fg:x="29" fg:w="1"/><text x="51.1272%" y="783.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(soul_lang_rust::steps::step_interfaces::i_parser::scope::InnerScopeBuilder&lt;alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="757" width="1.7544%" height="15" fill="rgb(248,177,22)" fg:x="29" fg:w="1"/><text x="51.1272%" y="767.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::scope::InnerScope&lt;alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="741" width="1.7544%" height="15" fill="rgb(215,211,37)" fg:x="29" fg:w="1"/><text x="51.1272%" y="751.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::scope::InnerScope&lt;alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="725" width="1.7544%" height="15" fill="rgb(241,128,51)" fg:x="29" fg:w="1"/><text x="51.1272%" y="735.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::scope::InnerScope&lt;alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="709" width="1.7544%" height="15" fill="rgb(227,165,31)" fg:x="29" fg:w="1"/><text x="51.1272%" y="719.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(soul_lang_rust::steps::step_interfaces::i_parser::scope::InnerScope&lt;alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="693" width="1.7544%" height="15" fill="rgb(228,167,24)" fg:x="29" fg:w="1"/><text x="51.1272%" y="703.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="677" width="1.7544%" height="15" fill="rgb(228,143,12)" fg:x="29" fg:w="1"/><text x="51.1272%" y="687.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(hashbrown::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="661" width="1.7544%" height="15" fill="rgb(249,149,8)" fg:x="29" fg:w="1"/><text x="51.1272%" y="671.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="645" width="1.7544%" height="15" fill="rgb(243,35,44)" fg:x="29" fg:w="1"/><text x="51.1272%" y="655.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeKind&gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="629" width="1.7544%" height="15" fill="rgb(246,89,9)" fg:x="29" fg:w="1"/><text x="51.1272%" y="639.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 1.75%)</title><rect x="50.8772%" y="613" width="1.7544%" height="15" fill="rgb(233,213,13)" fg:x="29" fg:w="1"/><text x="51.1272%" y="623.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::raw::RawTableInner::drop_elements (1 samples, 1.75%)</title><rect x="50.8772%" y="597" width="1.7544%" height="15" fill="rgb(233,141,41)" fg:x="29" fg:w="1"/><text x="51.1272%" y="607.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeKind&gt;,alloc::alloc::Global&gt; &gt; &gt;::drop (1 samples, 1.75%)</title><rect x="50.8772%" y="581" width="1.7544%" height="15" fill="rgb(239,167,4)" fg:x="29" fg:w="1"/><text x="51.1272%" y="591.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="565" width="1.7544%" height="15" fill="rgb(209,217,16)" fg:x="29" fg:w="1"/><text x="51.1272%" y="575.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="549" width="1.7544%" height="15" fill="rgb(219,88,35)" fg:x="29" fg:w="1"/><text x="51.1272%" y="559.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="533" width="1.7544%" height="15" fill="rgb(220,193,23)" fg:x="29" fg:w="1"/><text x="51.1272%" y="543.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="517" width="1.7544%" height="15" fill="rgb(230,90,52)" fg:x="29" fg:w="1"/><text x="51.1272%" y="527.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="501" width="1.7544%" height="15" fill="rgb(252,106,19)" fg:x="29" fg:w="1"/><text x="51.1272%" y="511.50"></text></g><g><title>soul_lang_rust.exe`alloc::sync::Arc&lt;std::sync::poison::rwlock::RwLock&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::VariableDecl&gt;,alloc::alloc::Global&gt;::drop_slow&lt;std::sync::poison::rwlock::RwLock&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::VariableDecl&gt;,alloc::alloc::Global&gt; (1 samples, 1.75%)</title><rect x="50.8772%" y="485" width="1.7544%" height="15" fill="rgb(206,74,20)" fg:x="29" fg:w="1"/><text x="51.1272%" y="495.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::sync::Weak&lt;std::sync::poison::rwlock::RwLock&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::VariableDecl&gt;,ref$ (1 samples, 1.75%)</title><rect x="50.8772%" y="469" width="1.7544%" height="15" fill="rgb(230,138,44)" fg:x="29" fg:w="1"/><text x="51.1272%" y="479.50"></text></g><g><title>soul_lang_rust.exe`alloc::sync::impl$46::drop(alloc::sync::Weak&lt;std::sync::poison::rwlock::RwLock&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::VariableDecl&gt;,ref$ (1 samples, 1.75%)</title><rect x="50.8772%" y="453" width="1.7544%" height="15" fill="rgb(235,182,43)" fg:x="29" fg:w="1"/><text x="51.1272%" y="463.50"></text></g><g><title>soul_lang_rust.exe`alloc::sync::Weak&lt;std::sync::poison::rwlock::RwLock&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::VariableDecl&gt;,ref$&lt;alloc::alloc::Global&gt; &gt;::inner (1 samples, 1.75%)</title><rect x="50.8772%" y="437" width="1.7544%" height="15" fill="rgb(242,16,51)" fg:x="29" fg:w="1"/><text x="51.1272%" y="447.50"></text></g><g><title>soul_lang_rust.exe`alloc::rc::is_dangling(alloc::sync::ArcInner&lt;std::sync::poison::rwlock::RwLock (1 samples, 1.75%)</title><rect x="50.8772%" y="421" width="1.7544%" height="15" fill="rgb(248,9,4)" fg:x="29" fg:w="1"/><text x="51.1272%" y="431.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place&lt;std::sync::poison::rwlock::RwLock&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::VariableDecl&gt; &gt;(std::sync::poison::rwlock::RwLock (1 samples, 1.75%)</title><rect x="50.8772%" y="405" width="1.7544%" height="15" fill="rgb(210,31,22)" fg:x="29" fg:w="1"/><text x="51.1272%" y="415.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(core::cell::UnsafeCell (1 samples, 1.75%)</title><rect x="50.8772%" y="389" width="1.7544%" height="15" fill="rgb(239,54,39)" fg:x="29" fg:w="1"/><text x="51.1272%" y="399.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="50.8772%" y="373" width="1.7544%" height="15" fill="rgb(230,99,41)" fg:x="29" fg:w="1"/><text x="51.1272%" y="383.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(enum2$&lt;core::option::Option&lt;alloc::boxed::Box&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="357" width="1.7544%" height="15" fill="rgb(253,106,12)" fg:x="29" fg:w="1"/><text x="51.1272%" y="367.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="341" width="1.7544%" height="15" fill="rgb(213,46,41)" fg:x="29" fg:w="1"/><text x="51.1272%" y="351.50"></text></g><g><title>soul_lang_rust.exe`alloc::boxed::impl$8::drop(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="50.8772%" y="325" width="1.7544%" height="15" fill="rgb(215,133,35)" fg:x="29" fg:w="1"/><text x="51.1272%" y="335.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="50.8772%" y="309" width="1.7544%" height="15" fill="rgb(213,28,5)" fg:x="29" fg:w="1"/><text x="51.1272%" y="319.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::dealloc (1 samples, 1.75%)</title><rect x="50.8772%" y="293" width="1.7544%" height="15" fill="rgb(215,77,49)" fg:x="29" fg:w="1"/><text x="51.1272%" y="303.50"></text></g><g><title>`0x7FFF98675898 (1 samples, 1.75%)</title><rect x="50.8772%" y="277" width="1.7544%" height="15" fill="rgb(248,100,22)" fg:x="29" fg:w="1"/><text x="51.1272%" y="287.50"></text></g><g><title>`0x7FFF985F29EB (1 samples, 1.75%)</title><rect x="50.8772%" y="261" width="1.7544%" height="15" fill="rgb(208,67,9)" fg:x="29" fg:w="1"/><text x="51.1272%" y="271.50"></text></g><g><title>`0x7FFF986A0152 (1 samples, 1.75%)</title><rect x="50.8772%" y="245" width="1.7544%" height="15" fill="rgb(219,133,21)" fg:x="29" fg:w="1"/><text x="51.1272%" y="255.50"></text></g><g><title>`0x7FFF98675930 (1 samples, 1.75%)</title><rect x="50.8772%" y="229" width="1.7544%" height="15" fill="rgb(246,46,29)" fg:x="29" fg:w="1"/><text x="51.1272%" y="239.50"></text></g><g><title>`0x7FFF985F49D6 (1 samples, 1.75%)</title><rect x="50.8772%" y="213" width="1.7544%" height="15" fill="rgb(246,185,52)" fg:x="29" fg:w="1"/><text x="51.1272%" y="223.50"></text></g><g><title>`0x7FFF98609B68 (1 samples, 1.75%)</title><rect x="50.8772%" y="197" width="1.7544%" height="15" fill="rgb(252,136,11)" fg:x="29" fg:w="1"/><text x="51.1272%" y="207.50"></text></g><g><title>`0x7FFF985F801E (1 samples, 1.75%)</title><rect x="50.8772%" y="181" width="1.7544%" height="15" fill="rgb(219,138,53)" fg:x="29" fg:w="1"/><text x="51.1272%" y="191.50"></text></g><g><title>`0x7FFF986CB419 (1 samples, 1.75%)</title><rect x="50.8772%" y="165" width="1.7544%" height="15" fill="rgb(211,51,23)" fg:x="29" fg:w="1"/><text x="51.1272%" y="175.50"></text></g><g><title>`0x7FFF98742194 (1 samples, 1.75%)</title><rect x="50.8772%" y="149" width="1.7544%" height="15" fill="rgb(247,221,28)" fg:x="29" fg:w="1"/><text x="51.1272%" y="159.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="52.6316%" y="837" width="1.7544%" height="15" fill="rgb(251,222,45)" fg:x="30" fg:w="1"/><text x="52.8816%" y="847.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="52.6316%" y="821" width="1.7544%" height="15" fill="rgb(217,162,53)" fg:x="30" fg:w="1"/><text x="52.8816%" y="831.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="805" width="1.7544%" height="15" fill="rgb(229,93,14)" fg:x="30" fg:w="1"/><text x="52.8816%" y="815.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="789" width="1.7544%" height="15" fill="rgb(209,67,49)" fg:x="30" fg:w="1"/><text x="52.8816%" y="799.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="773" width="1.7544%" height="15" fill="rgb(213,87,29)" fg:x="30" fg:w="1"/><text x="52.8816%" y="783.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1 samples, 1.75%)</title><rect x="52.6316%" y="757" width="1.7544%" height="15" fill="rgb(205,151,52)" fg:x="30" fg:w="1"/><text x="52.8816%" y="767.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (1 samples, 1.75%)</title><rect x="52.6316%" y="741" width="1.7544%" height="15" fill="rgb(253,215,39)" fg:x="30" fg:w="1"/><text x="52.8816%" y="751.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$25::drop&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::abstract_syntax_tree::GlobalKind&gt; &gt;,alloc::alloc::Global&gt;(alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="725" width="1.7544%" height="15" fill="rgb(221,220,41)" fg:x="30" fg:w="1"/><text x="52.8816%" y="735.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="709" width="1.7544%" height="15" fill="rgb(218,133,21)" fg:x="30" fg:w="1"/><text x="52.8816%" y="719.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::objects::ClassDecl&gt; (1 samples, 1.75%)</title><rect x="52.6316%" y="693" width="1.7544%" height="15" fill="rgb(221,193,43)" fg:x="30" fg:w="1"/><text x="52.8816%" y="703.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="677" width="1.7544%" height="15" fill="rgb(240,128,52)" fg:x="30" fg:w="1"/><text x="52.8816%" y="687.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="661" width="1.7544%" height="15" fill="rgb(253,114,12)" fg:x="30" fg:w="1"/><text x="52.8816%" y="671.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="645" width="1.7544%" height="15" fill="rgb(215,223,47)" fg:x="30" fg:w="1"/><text x="52.8816%" y="655.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::function::FnDeclKind&gt; &gt; &gt;(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="629" width="1.7544%" height="15" fill="rgb(248,225,23)" fg:x="30" fg:w="1"/><text x="52.8816%" y="639.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="613" width="1.7544%" height="15" fill="rgb(250,108,0)" fg:x="30" fg:w="1"/><text x="52.8816%" y="623.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="52.6316%" y="597" width="1.7544%" height="15" fill="rgb(228,208,7)" fg:x="30" fg:w="1"/><text x="52.8816%" y="607.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="52.6316%" y="581" width="1.7544%" height="15" fill="rgb(244,45,10)" fg:x="30" fg:w="1"/><text x="52.8816%" y="591.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="565" width="1.7544%" height="15" fill="rgb(207,125,25)" fg:x="30" fg:w="1"/><text x="52.8816%" y="575.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="549" width="1.7544%" height="15" fill="rgb(210,195,18)" fg:x="30" fg:w="1"/><text x="52.8816%" y="559.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="533" width="1.7544%" height="15" fill="rgb(249,80,12)" fg:x="30" fg:w="1"/><text x="52.8816%" y="543.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="517" width="1.7544%" height="15" fill="rgb(221,65,9)" fg:x="30" fg:w="1"/><text x="52.8816%" y="527.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::StmtKind&gt; &gt;(enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="501" width="1.7544%" height="15" fill="rgb(235,49,36)" fg:x="30" fg:w="1"/><text x="52.8816%" y="511.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="52.6316%" y="485" width="1.7544%" height="15" fill="rgb(225,32,20)" fg:x="30" fg:w="1"/><text x="52.8816%" y="495.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::expression::ExprKind&gt; &gt; &gt;(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="469" width="1.7544%" height="15" fill="rgb(215,141,46)" fg:x="30" fg:w="1"/><text x="52.8816%" y="479.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="453" width="1.7544%" height="15" fill="rgb(250,160,47)" fg:x="30" fg:w="1"/><text x="52.8816%" y="463.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="52.6316%" y="437" width="1.7544%" height="15" fill="rgb(216,222,40)" fg:x="30" fg:w="1"/><text x="52.8816%" y="447.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="421" width="1.7544%" height="15" fill="rgb(234,217,39)" fg:x="30" fg:w="1"/><text x="52.8816%" y="431.50"></text></g><g><title>soul_lang_rust.exe`alloc::boxed::impl$8::drop(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="52.6316%" y="405" width="1.7544%" height="15" fill="rgb(207,178,40)" fg:x="30" fg:w="1"/><text x="52.8816%" y="415.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="52.6316%" y="389" width="1.7544%" height="15" fill="rgb(221,136,13)" fg:x="30" fg:w="1"/><text x="52.8816%" y="399.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::dealloc (1 samples, 1.75%)</title><rect x="52.6316%" y="373" width="1.7544%" height="15" fill="rgb(249,199,10)" fg:x="30" fg:w="1"/><text x="52.8816%" y="383.50"></text></g><g><title>`0x7FFF98675D46 (1 samples, 1.75%)</title><rect x="52.6316%" y="357" width="1.7544%" height="15" fill="rgb(249,222,13)" fg:x="30" fg:w="1"/><text x="52.8816%" y="367.50"></text></g><g><title>soul_lang_rust.exe`std::fs::File::open (1 samples, 1.75%)</title><rect x="54.3860%" y="789" width="1.7544%" height="15" fill="rgb(244,185,38)" fg:x="31" fg:w="1"/><text x="54.6360%" y="799.50"></text></g><g><title>soul_lang_rust.exe`std::fs::OpenOptions::open(ref$ (1 samples, 1.75%)</title><rect x="54.3860%" y="773" width="1.7544%" height="15" fill="rgb(236,202,9)" fg:x="31" fg:w="1"/><text x="54.6360%" y="783.50"></text></g><g><title>soul_lang_rust.exe`std::sys::pal::windows::fs::File::open (1 samples, 1.75%)</title><rect x="54.3860%" y="757" width="1.7544%" height="15" fill="rgb(250,229,37)" fg:x="31" fg:w="1"/><text x="54.6360%" y="767.50"></text></g><g><title>soul_lang_rust.exe`std::os::windows::io::handle::impl$13::try_from (1 samples, 1.75%)</title><rect x="54.3860%" y="741" width="1.7544%" height="15" fill="rgb(206,174,23)" fg:x="31" fg:w="1"/><text x="54.6360%" y="751.50"></text></g><g><title>soul_lang_rust.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (1 samples, 1.75%)</title><rect x="54.3860%" y="725" width="1.7544%" height="15" fill="rgb(211,33,43)" fg:x="31" fg:w="1"/><text x="54.6360%" y="735.50"></text></g><g><title>`0x7FFF95C16395 (1 samples, 1.75%)</title><rect x="54.3860%" y="709" width="1.7544%" height="15" fill="rgb(245,58,50)" fg:x="31" fg:w="1"/><text x="54.6360%" y="719.50"></text></g><g><title>`0x7FFF95C61917 (1 samples, 1.75%)</title><rect x="54.3860%" y="693" width="1.7544%" height="15" fill="rgb(244,68,36)" fg:x="31" fg:w="1"/><text x="54.6360%" y="703.50"></text></g><g><title>`0x7FFF98742874 (1 samples, 1.75%)</title><rect x="54.3860%" y="677" width="1.7544%" height="15" fill="rgb(232,229,15)" fg:x="31" fg:w="1"/><text x="54.6360%" y="687.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (1 samples, 1.75%)</title><rect x="56.1404%" y="773" width="1.7544%" height="15" fill="rgb(254,30,23)" fg:x="32" fg:w="1"/><text x="56.3904%" y="783.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec (1 samples, 1.75%)</title><rect x="56.1404%" y="757" width="1.7544%" height="15" fill="rgb(235,160,14)" fg:x="32" fg:w="1"/><text x="56.3904%" y="767.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1 samples, 1.75%)</title><rect x="56.1404%" y="741" width="1.7544%" height="15" fill="rgb(212,155,44)" fg:x="32" fg:w="1"/><text x="56.3904%" y="751.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (1 samples, 1.75%)</title><rect x="56.1404%" y="725" width="1.7544%" height="15" fill="rgb(226,2,50)" fg:x="32" fg:w="1"/><text x="56.3904%" y="735.50"></text></g><g><title>soul_lang_rust.exe`std::fs::DirBuilder::create_dir_all (1 samples, 1.75%)</title><rect x="56.1404%" y="709" width="1.7544%" height="15" fill="rgb(234,177,6)" fg:x="32" fg:w="1"/><text x="56.3904%" y="719.50"></text></g><g><title>soul_lang_rust.exe`std::path::Path::is_dir (1 samples, 1.75%)</title><rect x="56.1404%" y="693" width="1.7544%" height="15" fill="rgb(217,24,9)" fg:x="32" fg:w="1"/><text x="56.3904%" y="703.50"></text></g><g><title>soul_lang_rust.exe`std::fs::metadata (1 samples, 1.75%)</title><rect x="56.1404%" y="677" width="1.7544%" height="15" fill="rgb(220,13,46)" fg:x="32" fg:w="1"/><text x="56.3904%" y="687.50"></text></g><g><title>soul_lang_rust.exe`core::result::Result::map (1 samples, 1.75%)</title><rect x="56.1404%" y="661" width="1.7544%" height="15" fill="rgb(239,221,27)" fg:x="32" fg:w="1"/><text x="56.3904%" y="671.50"></text></g><g><title>soul_lang_rust.exe`std::sys::pal::windows::fs::stat (1 samples, 1.75%)</title><rect x="56.1404%" y="645" width="1.7544%" height="15" fill="rgb(222,198,25)" fg:x="32" fg:w="1"/><text x="56.3904%" y="655.50"></text></g><g><title>soul_lang_rust.exe`std::sys::pal::windows::fs::metadata (1 samples, 1.75%)</title><rect x="56.1404%" y="629" width="1.7544%" height="15" fill="rgb(211,99,13)" fg:x="32" fg:w="1"/><text x="56.3904%" y="639.50"></text></g><g><title>soul_lang_rust.exe`std::sys::pal::windows::fs::File::open (1 samples, 1.75%)</title><rect x="56.1404%" y="613" width="1.7544%" height="15" fill="rgb(232,111,31)" fg:x="32" fg:w="1"/><text x="56.3904%" y="623.50"></text></g><g><title>soul_lang_rust.exe`std::os::windows::io::handle::impl$13::try_from (1 samples, 1.75%)</title><rect x="56.1404%" y="597" width="1.7544%" height="15" fill="rgb(245,82,37)" fg:x="32" fg:w="1"/><text x="56.3904%" y="607.50"></text></g><g><title>soul_lang_rust.exe`std::os::windows::io::handle::HandleOrInvalid::is_valid (1 samples, 1.75%)</title><rect x="56.1404%" y="581" width="1.7544%" height="15" fill="rgb(227,149,46)" fg:x="32" fg:w="1"/><text x="56.3904%" y="591.50"></text></g><g><title>`0x7FFF95C16395 (1 samples, 1.75%)</title><rect x="56.1404%" y="565" width="1.7544%" height="15" fill="rgb(218,36,50)" fg:x="32" fg:w="1"/><text x="56.3904%" y="575.50"></text></g><g><title>`0x7FFF95C61917 (1 samples, 1.75%)</title><rect x="56.1404%" y="549" width="1.7544%" height="15" fill="rgb(226,80,48)" fg:x="32" fg:w="1"/><text x="56.3904%" y="559.50"></text></g><g><title>`0x7FFF98742874 (1 samples, 1.75%)</title><rect x="56.1404%" y="533" width="1.7544%" height="15" fill="rgb(238,224,15)" fg:x="32" fg:w="1"/><text x="56.3904%" y="543.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::impl$0::main_err_map(enum2$&lt;core::result::Result&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;, ref$ (3 samples, 5.26%)</title><rect x="54.3860%" y="837" width="5.2632%" height="15" fill="rgb(241,136,10)" fg:x="31" fg:w="3"/><text x="54.6360%" y="847.50">soul_l..</text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;, soul_lang_rust::impl$0::main_err_map::closure_env$0&lt;std::io::buffered::bufreader::BufReader (3 samples, 5.26%)</title><rect x="54.3860%" y="821" width="5.2632%" height="15" fill="rgb(208,32,45)" fg:x="31" fg:w="3"/><text x="54.6360%" y="831.50">soul_l..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::get_file_reader (3 samples, 5.26%)</title><rect x="54.3860%" y="805" width="5.2632%" height="15" fill="rgb(207,135,9)" fg:x="31" fg:w="3"/><text x="54.6360%" y="815.50">soul_l..</text></g><g><title>soul_lang_rust.exe`std::fs::create_dir_all (2 samples, 3.51%)</title><rect x="56.1404%" y="789" width="3.5088%" height="15" fill="rgb(206,86,44)" fg:x="32" fg:w="2"/><text x="56.3904%" y="799.50">sou..</text></g><g><title>soul_lang_rust.exe`std::fs::DirBuilder::recursive (1 samples, 1.75%)</title><rect x="57.8947%" y="773" width="1.7544%" height="15" fill="rgb(245,177,15)" fg:x="33" fg:w="1"/><text x="58.1447%" y="783.50"></text></g><g><title>soul_lang_rust.exe`alloc::fmt::format::format_inner (1 samples, 1.75%)</title><rect x="57.8947%" y="757" width="1.7544%" height="15" fill="rgb(206,64,50)" fg:x="33" fg:w="1"/><text x="58.1447%" y="767.50"></text></g><g><title>soul_lang_rust.exe`core::result::Result::expect (1 samples, 1.75%)</title><rect x="57.8947%" y="741" width="1.7544%" height="15" fill="rgb(234,36,40)" fg:x="33" fg:w="1"/><text x="58.1447%" y="751.50"></text></g><g><title>soul_lang_rust.exe`core::fmt::write (1 samples, 1.75%)</title><rect x="57.8947%" y="725" width="1.7544%" height="15" fill="rgb(213,64,8)" fg:x="33" fg:w="1"/><text x="58.1447%" y="735.50"></text></g><g><title>soul_lang_rust.exe`alloc::string::impl$58::write_str (1 samples, 1.75%)</title><rect x="57.8947%" y="709" width="1.7544%" height="15" fill="rgb(210,75,36)" fg:x="33" fg:w="1"/><text x="58.1447%" y="719.50"></text></g><g><title>soul_lang_rust.exe`alloc::string::String::push_str (1 samples, 1.75%)</title><rect x="57.8947%" y="693" width="1.7544%" height="15" fill="rgb(229,88,21)" fg:x="33" fg:w="1"/><text x="58.1447%" y="703.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec::extend_from_slice (1 samples, 1.75%)</title><rect x="57.8947%" y="677" width="1.7544%" height="15" fill="rgb(252,204,47)" fg:x="33" fg:w="1"/><text x="58.1447%" y="687.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::spec_extend::impl$4::spec_extend (1 samples, 1.75%)</title><rect x="57.8947%" y="661" width="1.7544%" height="15" fill="rgb(208,77,27)" fg:x="33" fg:w="1"/><text x="58.1447%" y="671.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec::append_elements (1 samples, 1.75%)</title><rect x="57.8947%" y="645" width="1.7544%" height="15" fill="rgb(221,76,26)" fg:x="33" fg:w="1"/><text x="58.1447%" y="655.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec::reserve (1 samples, 1.75%)</title><rect x="57.8947%" y="629" width="1.7544%" height="15" fill="rgb(225,139,18)" fg:x="33" fg:w="1"/><text x="58.1447%" y="639.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVec::reserve (1 samples, 1.75%)</title><rect x="57.8947%" y="613" width="1.7544%" height="15" fill="rgb(230,137,11)" fg:x="33" fg:w="1"/><text x="58.1447%" y="623.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner::reserve (1 samples, 1.75%)</title><rect x="57.8947%" y="597" width="1.7544%" height="15" fill="rgb(212,28,1)" fg:x="33" fg:w="1"/><text x="58.1447%" y="607.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::impl$5::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt; (1 samples, 1.75%)</title><rect x="57.8947%" y="581" width="1.7544%" height="15" fill="rgb(248,164,17)" fg:x="33" fg:w="1"/><text x="58.1447%" y="591.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (1 samples, 1.75%)</title><rect x="59.6491%" y="757" width="1.7544%" height="15" fill="rgb(222,171,42)" fg:x="34" fg:w="1"/><text x="59.8991%" y="767.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_class::get_class (1 samples, 1.75%)</title><rect x="59.6491%" y="741" width="1.7544%" height="15" fill="rgb(243,84,45)" fg:x="34" fg:w="1"/><text x="59.8991%" y="751.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_function_decl::get_function_decl(enum2$&lt;core::option::Option&lt;ref$ (1 samples, 1.75%)</title><rect x="59.6491%" y="725" width="1.7544%" height="15" fill="rgb(252,49,23)" fg:x="34" fg:w="1"/><text x="59.8991%" y="735.50"></text></g><g><title>soul_lang_rust.exe`core::option::impl$5::clone(enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (1 samples, 1.75%)</title><rect x="59.6491%" y="709" width="1.7544%" height="15" fill="rgb(215,19,7)" fg:x="34" fg:w="1"/><text x="59.8991%" y="719.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_block::get_block(soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeVisibility, soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::SoulThis&gt; &gt; &gt;, alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (1 samples, 1.75%)</title><rect x="59.6491%" y="693" width="1.7544%" height="15" fill="rgb(238,81,41)" fg:x="34" fg:w="1"/><text x="59.8991%" y="703.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="59.6491%" y="677" width="1.7544%" height="15" fill="rgb(210,199,37)" fg:x="34" fg:w="1"/><text x="59.8991%" y="687.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_statment::get_statment(enum2$ (1 samples, 1.75%)</title><rect x="59.6491%" y="661" width="1.7544%" height="15" fill="rgb(244,192,49)" fg:x="34" fg:w="1"/><text x="59.8991%" y="671.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (1 samples, 1.75%)</title><rect x="59.6491%" y="645" width="1.7544%" height="15" fill="rgb(226,211,11)" fg:x="34" fg:w="1"/><text x="59.8991%" y="655.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_var_decl_assign::get_assignment (1 samples, 1.75%)</title><rect x="59.6491%" y="629" width="1.7544%" height="15" fill="rgb(236,162,54)" fg:x="34" fg:w="1"/><text x="59.8991%" y="639.50"></text></g><g><title>soul_lang_rust.exe`once_cell::sync::impl$12::deref(once_cell::sync::Lazy&lt;alloc::vec::Vec&lt;ref$&lt;str$&gt;,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;str$&gt;,alloc::alloc::Global&gt; (*) (1 samples, 1.75%)</title><rect x="59.6491%" y="613" width="1.7544%" height="15" fill="rgb(220,229,9)" fg:x="34" fg:w="1"/><text x="59.8991%" y="623.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::inner_get_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="59.6491%" y="597" width="1.7544%" height="15" fill="rgb(250,87,22)" fg:x="34" fg:w="1"/><text x="59.8991%" y="607.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::convert_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, soul_lang_rust::steps::parser::get_expressions::parse_expression::ExpressionStacks*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="59.6491%" y="581" width="1.7544%" height="15" fill="rgb(239,43,17)" fg:x="34" fg:w="1"/><text x="59.8991%" y="591.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::try_get_literal (1 samples, 1.75%)</title><rect x="59.6491%" y="565" width="1.7544%" height="15" fill="rgb(231,177,25)" fg:x="34" fg:w="1"/><text x="59.8991%" y="575.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::impl$0::try_from_stream (1 samples, 1.75%)</title><rect x="59.6491%" y="549" width="1.7544%" height="15" fill="rgb(219,179,1)" fg:x="34" fg:w="1"/><text x="59.8991%" y="559.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::Literal&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::is_err (1 samples, 1.75%)</title><rect x="59.6491%" y="533" width="1.7544%" height="15" fill="rgb(238,219,53)" fg:x="34" fg:w="1"/><text x="59.8991%" y="543.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::Literal&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::is_ok (1 samples, 1.75%)</title><rect x="59.6491%" y="517" width="1.7544%" height="15" fill="rgb(232,167,36)" fg:x="34" fg:w="1"/><text x="59.8991%" y="527.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::inner_from_stream (1 samples, 1.75%)</title><rect x="59.6491%" y="501" width="1.7544%" height="15" fill="rgb(244,19,51)" fg:x="34" fg:w="1"/><text x="59.8991%" y="511.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::get_char (1 samples, 1.75%)</title><rect x="59.6491%" y="485" width="1.7544%" height="15" fill="rgb(224,6,22)" fg:x="34" fg:w="1"/><text x="59.8991%" y="495.50"></text></g><g><title>soul_lang_rust.exe`alloc::fmt::format (1 samples, 1.75%)</title><rect x="59.6491%" y="469" width="1.7544%" height="15" fill="rgb(224,145,5)" fg:x="34" fg:w="1"/><text x="59.8991%" y="479.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::errors::soul_error::SoulError::new (1 samples, 1.75%)</title><rect x="59.6491%" y="453" width="1.7544%" height="15" fill="rgb(234,130,49)" fg:x="34" fg:w="1"/><text x="59.8991%" y="463.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::exchange_malloc (1 samples, 1.75%)</title><rect x="59.6491%" y="437" width="1.7544%" height="15" fill="rgb(254,6,2)" fg:x="34" fg:w="1"/><text x="59.8991%" y="447.50"></text></g><g><title>soul_lang_rust.exe`alloc::boxed::impl$0::new (1 samples, 1.75%)</title><rect x="59.6491%" y="421" width="1.7544%" height="15" fill="rgb(208,96,46)" fg:x="34" fg:w="1"/><text x="59.8991%" y="431.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::exchange_malloc (1 samples, 1.75%)</title><rect x="59.6491%" y="405" width="1.7544%" height="15" fill="rgb(239,3,39)" fg:x="34" fg:w="1"/><text x="59.8991%" y="415.50"></text></g><g><title>`0x7FFF985EF164 (1 samples, 1.75%)</title><rect x="59.6491%" y="389" width="1.7544%" height="15" fill="rgb(233,210,1)" fg:x="34" fg:w="1"/><text x="59.8991%" y="399.50"></text></g><g><title>`0x7FFF985EF1E9 (1 samples, 1.75%)</title><rect x="59.6491%" y="373" width="1.7544%" height="15" fill="rgb(244,137,37)" fg:x="34" fg:w="1"/><text x="59.8991%" y="383.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::function::Parameter&gt;,alloc::alloc::Global&gt;::new (1 samples, 1.75%)</title><rect x="61.4035%" y="661" width="1.7544%" height="15" fill="rgb(240,136,2)" fg:x="35" fg:w="1"/><text x="61.6535%" y="671.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_block::get_block(soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeVisibility, soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::SoulThis&gt; &gt; &gt;, alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (1 samples, 1.75%)</title><rect x="61.4035%" y="645" width="1.7544%" height="15" fill="rgb(239,18,37)" fg:x="35" fg:w="1"/><text x="61.6535%" y="655.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="61.4035%" y="629" width="1.7544%" height="15" fill="rgb(218,185,22)" fg:x="35" fg:w="1"/><text x="61.6535%" y="639.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_statment::get_statment(enum2$ (1 samples, 1.75%)</title><rect x="61.4035%" y="613" width="1.7544%" height="15" fill="rgb(225,218,4)" fg:x="35" fg:w="1"/><text x="61.6535%" y="623.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="61.4035%" y="597" width="1.7544%" height="15" fill="rgb(230,182,32)" fg:x="35" fg:w="1"/><text x="61.6535%" y="607.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::inner_get_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="581" width="1.7544%" height="15" fill="rgb(242,56,43)" fg:x="35" fg:w="1"/><text x="61.6535%" y="591.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::convert_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, soul_lang_rust::steps::parser::get_expressions::parse_expression::ExpressionStacks*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="565" width="1.7544%" height="15" fill="rgb(233,99,24)" fg:x="35" fg:w="1"/><text x="61.6535%" y="575.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="61.4035%" y="549" width="1.7544%" height="15" fill="rgb(234,209,42)" fg:x="35" fg:w="1"/><text x="61.6535%" y="559.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression_group::try_get_expression_group (1 samples, 1.75%)</title><rect x="61.4035%" y="533" width="1.7544%" height="15" fill="rgb(227,7,12)" fg:x="35" fg:w="1"/><text x="61.6535%" y="543.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::soul_type::get_soul_type::impl$0::try_from_stream (1 samples, 1.75%)</title><rect x="61.4035%" y="517" width="1.7544%" height="15" fill="rgb(245,203,43)" fg:x="35" fg:w="1"/><text x="61.6535%" y="527.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::soul_type::get_soul_type::inner_from_token_stream (1 samples, 1.75%)</title><rect x="61.4035%" y="501" width="1.7544%" height="15" fill="rgb(238,205,33)" fg:x="35" fg:w="1"/><text x="61.6535%" y="511.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::soul_type::get_soul_type::get_type_kind (1 samples, 1.75%)</title><rect x="61.4035%" y="485" width="1.7544%" height="15" fill="rgb(231,56,7)" fg:x="35" fg:w="1"/><text x="61.6535%" y="495.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::option::Option&lt;ref$&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::soul_type::type_kind::TypeKind&gt; &gt; &gt; &gt;::cloned(enum2$&lt;core::option::Option&lt;ref$&lt;enum2$ (1 samples, 1.75%)</title><rect x="61.4035%" y="469" width="1.7544%" height="15" fill="rgb(244,186,29)" fg:x="35" fg:w="1"/><text x="61.6535%" y="479.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder::lookup_type(ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="453" width="1.7544%" height="15" fill="rgb(234,111,31)" fg:x="35" fg:w="1"/><text x="61.6535%" y="463.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::step_interfaces::i_parser::scope::InnerScope&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::soul_type::type_kind::TypeKind&gt; &gt;::get(ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="437" width="1.7544%" height="15" fill="rgb(241,149,10)" fg:x="35" fg:w="1"/><text x="61.6535%" y="447.50"></text></g><g><title>soul_lang_rust.exe`std::collections::hash::map::HashMap&lt;alloc::string::String,enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::soul_type::type_kind::TypeKind&gt;,std::hash::random::RandomState&gt;::get(ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="421" width="1.7544%" height="15" fill="rgb(249,206,44)" fg:x="35" fg:w="1"/><text x="61.6535%" y="431.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::map::HashMap&lt;alloc::string::String,enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::soul_type::type_kind::TypeKind&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get(ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="405" width="1.7544%" height="15" fill="rgb(251,153,30)" fg:x="35" fg:w="1"/><text x="61.6535%" y="415.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::map::HashMap&lt;alloc::string::String,enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::soul_type::type_kind::TypeKind&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner(ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="389" width="1.7544%" height="15" fill="rgb(239,152,38)" fg:x="35" fg:w="1"/><text x="61.6535%" y="399.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="373" width="1.7544%" height="15" fill="rgb(249,139,47)" fg:x="35" fg:w="1"/><text x="61.6535%" y="383.50"></text></g><g><title>soul_lang_rust.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;str$&gt; &gt;(std::hash::random::RandomState*, ref$ (1 samples, 1.75%)</title><rect x="61.4035%" y="357" width="1.7544%" height="15" fill="rgb(244,64,35)" fg:x="35" fg:w="1"/><text x="61.6535%" y="367.50"></text></g><g><title>soul_lang_rust.exe`std::hash::random::impl$1::build_hasher (1 samples, 1.75%)</title><rect x="61.4035%" y="341" width="1.7544%" height="15" fill="rgb(216,46,15)" fg:x="35" fg:w="1"/><text x="61.6535%" y="351.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (1 samples, 1.75%)</title><rect x="63.1579%" y="613" width="1.7544%" height="15" fill="rgb(250,74,19)" fg:x="36" fg:w="1"/><text x="63.4079%" y="623.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_function_call::get_function_call (1 samples, 1.75%)</title><rect x="63.1579%" y="597" width="1.7544%" height="15" fill="rgb(249,42,33)" fg:x="36" fg:w="1"/><text x="63.4079%" y="607.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_function_call::get_arguments (1 samples, 1.75%)</title><rect x="63.1579%" y="581" width="1.7544%" height="15" fill="rgb(242,149,17)" fg:x="36" fg:w="1"/><text x="63.4079%" y="591.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::expression::ExprKind&gt; &gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="63.1579%" y="565" width="1.7544%" height="15" fill="rgb(244,29,21)" fg:x="36" fg:w="1"/><text x="63.4079%" y="575.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::inner_get_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="63.1579%" y="549" width="1.7544%" height="15" fill="rgb(220,130,37)" fg:x="36" fg:w="1"/><text x="63.4079%" y="559.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::convert_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, soul_lang_rust::steps::parser::get_expressions::parse_expression::ExpressionStacks*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="63.1579%" y="533" width="1.7544%" height="15" fill="rgb(211,67,2)" fg:x="36" fg:w="1"/><text x="63.4079%" y="543.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;tuple$ (1 samples, 1.75%)</title><rect x="63.1579%" y="517" width="1.7544%" height="15" fill="rgb(235,68,52)" fg:x="36" fg:w="1"/><text x="63.4079%" y="527.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::end_expr_loop (1 samples, 1.75%)</title><rect x="63.1579%" y="501" width="1.7544%" height="15" fill="rgb(246,142,3)" fg:x="36" fg:w="1"/><text x="63.4079%" y="511.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::try_add_field_or_methode (1 samples, 1.75%)</title><rect x="63.1579%" y="485" width="1.7544%" height="15" fill="rgb(241,25,7)" fg:x="36" fg:w="1"/><text x="63.4079%" y="495.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::add_methode (1 samples, 1.75%)</title><rect x="63.1579%" y="469" width="1.7544%" height="15" fill="rgb(242,119,39)" fg:x="36" fg:w="1"/><text x="63.4079%" y="479.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_function_call::get_function_call (1 samples, 1.75%)</title><rect x="63.1579%" y="453" width="1.7544%" height="15" fill="rgb(241,98,45)" fg:x="36" fg:w="1"/><text x="63.4079%" y="463.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream::next (1 samples, 1.75%)</title><rect x="63.1579%" y="437" width="1.7544%" height="15" fill="rgb(254,28,30)" fg:x="36" fg:w="1"/><text x="63.4079%" y="447.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream::next_multiple (1 samples, 1.75%)</title><rect x="63.1579%" y="421" width="1.7544%" height="15" fill="rgb(241,142,54)" fg:x="36" fg:w="1"/><text x="63.4079%" y="431.50"></text></g><g><title>soul_lang_rust.exe`alloc::string::impl$6::clone (1 samples, 1.75%)</title><rect x="63.1579%" y="405" width="1.7544%" height="15" fill="rgb(222,85,15)" fg:x="36" fg:w="1"/><text x="63.4079%" y="415.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$11::clone (1 samples, 1.75%)</title><rect x="63.1579%" y="389" width="1.7544%" height="15" fill="rgb(210,85,47)" fg:x="36" fg:w="1"/><text x="63.4079%" y="399.50"></text></g><g><title>soul_lang_rust.exe`alloc::slice::impl$0::to_vec_in (1 samples, 1.75%)</title><rect x="63.1579%" y="373" width="1.7544%" height="15" fill="rgb(224,206,25)" fg:x="36" fg:w="1"/><text x="63.4079%" y="383.50"></text></g><g><title>soul_lang_rust.exe`alloc::slice::hack::to_vec (1 samples, 1.75%)</title><rect x="63.1579%" y="357" width="1.7544%" height="15" fill="rgb(243,201,19)" fg:x="36" fg:w="1"/><text x="63.4079%" y="367.50"></text></g><g><title>soul_lang_rust.exe`alloc::slice::hack::impl$1::to_vec (1 samples, 1.75%)</title><rect x="63.1579%" y="341" width="1.7544%" height="15" fill="rgb(236,59,4)" fg:x="36" fg:w="1"/><text x="63.4079%" y="351.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec::with_capacity_in (1 samples, 1.75%)</title><rect x="63.1579%" y="325" width="1.7544%" height="15" fill="rgb(254,179,45)" fg:x="36" fg:w="1"/><text x="63.4079%" y="335.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVec::with_capacity_in (1 samples, 1.75%)</title><rect x="63.1579%" y="309" width="1.7544%" height="15" fill="rgb(226,14,10)" fg:x="36" fg:w="1"/><text x="63.4079%" y="319.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner::with_capacity_in (1 samples, 1.75%)</title><rect x="63.1579%" y="293" width="1.7544%" height="15" fill="rgb(244,27,41)" fg:x="36" fg:w="1"/><text x="63.4079%" y="303.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner::try_allocate_in (1 samples, 1.75%)</title><rect x="63.1579%" y="277" width="1.7544%" height="15" fill="rgb(235,35,32)" fg:x="36" fg:w="1"/><text x="63.4079%" y="287.50"></text></g><g><title>`0x7FFF985EF164 (1 samples, 1.75%)</title><rect x="63.1579%" y="261" width="1.7544%" height="15" fill="rgb(218,68,31)" fg:x="36" fg:w="1"/><text x="63.4079%" y="271.50"></text></g><g><title>`0x7FFF985EF2A4 (1 samples, 1.75%)</title><rect x="63.1579%" y="245" width="1.7544%" height="15" fill="rgb(207,120,37)" fg:x="36" fg:w="1"/><text x="63.4079%" y="255.50"></text></g><g><title>`0x7FFF985EF8D2 (1 samples, 1.75%)</title><rect x="63.1579%" y="229" width="1.7544%" height="15" fill="rgb(227,98,0)" fg:x="36" fg:w="1"/><text x="63.4079%" y="239.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (2 samples, 3.51%)</title><rect x="63.1579%" y="661" width="3.5088%" height="15" fill="rgb(207,7,3)" fg:x="36" fg:w="2"/><text x="63.4079%" y="671.50">sou..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::inner_get_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, ref$&lt;slice2$&lt;ref$ (2 samples, 3.51%)</title><rect x="63.1579%" y="645" width="3.5088%" height="15" fill="rgb(206,98,19)" fg:x="36" fg:w="2"/><text x="63.4079%" y="655.50">sou..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::convert_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, soul_lang_rust::steps::parser::get_expressions::parse_expression::ExpressionStacks*, ref$&lt;slice2$&lt;ref$ (2 samples, 3.51%)</title><rect x="63.1579%" y="629" width="3.5088%" height="15" fill="rgb(217,5,26)" fg:x="36" fg:w="2"/><text x="63.4079%" y="639.50">sou..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::try_get_literal (1 samples, 1.75%)</title><rect x="64.9123%" y="613" width="1.7544%" height="15" fill="rgb(235,190,38)" fg:x="37" fg:w="1"/><text x="65.1623%" y="623.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::impl$0::try_from_stream (1 samples, 1.75%)</title><rect x="64.9123%" y="597" width="1.7544%" height="15" fill="rgb(247,86,24)" fg:x="37" fg:w="1"/><text x="65.1623%" y="607.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::Literal&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::is_err (1 samples, 1.75%)</title><rect x="64.9123%" y="581" width="1.7544%" height="15" fill="rgb(205,101,16)" fg:x="37" fg:w="1"/><text x="65.1623%" y="591.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::Literal&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::is_ok (1 samples, 1.75%)</title><rect x="64.9123%" y="565" width="1.7544%" height="15" fill="rgb(246,168,33)" fg:x="37" fg:w="1"/><text x="65.1623%" y="575.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::inner_from_stream (1 samples, 1.75%)</title><rect x="64.9123%" y="549" width="1.7544%" height="15" fill="rgb(231,114,1)" fg:x="37" fg:w="1"/><text x="65.1623%" y="559.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::get_number (1 samples, 1.75%)</title><rect x="64.9123%" y="533" width="1.7544%" height="15" fill="rgb(207,184,53)" fg:x="37" fg:w="1"/><text x="65.1623%" y="543.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;f64,core::num::dec2flt::ParseFloatError&gt; &gt;::map(enum2$&lt;core::result::Result (1 samples, 1.75%)</title><rect x="64.9123%" y="517" width="1.7544%" height="15" fill="rgb(224,95,51)" fg:x="37" fg:w="1"/><text x="65.1623%" y="527.50"></text></g><g><title>soul_lang_rust.exe`core::num::dec2flt::impl$3::from_str (1 samples, 1.75%)</title><rect x="64.9123%" y="501" width="1.7544%" height="15" fill="rgb(212,188,45)" fg:x="37" fg:w="1"/><text x="65.1623%" y="511.50"></text></g><g><title>soul_lang_rust.exe`core::num::dec2flt::dec2flt (1 samples, 1.75%)</title><rect x="64.9123%" y="485" width="1.7544%" height="15" fill="rgb(223,154,38)" fg:x="37" fg:w="1"/><text x="65.1623%" y="495.50"></text></g><g><title>soul_lang_rust.exe`core::num::dec2flt::parse::parse_number (1 samples, 1.75%)</title><rect x="64.9123%" y="469" width="1.7544%" height="15" fill="rgb(251,22,52)" fg:x="37" fg:w="1"/><text x="65.1623%" y="479.50"></text></g><g><title>soul_lang_rust.exe`core::num::dec2flt::parse::parse_partial_number (1 samples, 1.75%)</title><rect x="64.9123%" y="453" width="1.7544%" height="15" fill="rgb(229,209,22)" fg:x="37" fg:w="1"/><text x="65.1623%" y="463.50"></text></g><g><title>soul_lang_rust.exe`core::num::dec2flt::parse::try_parse_digits (1 samples, 1.75%)</title><rect x="64.9123%" y="437" width="1.7544%" height="15" fill="rgb(234,138,34)" fg:x="37" fg:w="1"/><text x="65.1623%" y="447.50"></text></g><g><title>soul_lang_rust.exe`core::num::dec2flt::common::impl$0::parse_digits (1 samples, 1.75%)</title><rect x="64.9123%" y="421" width="1.7544%" height="15" fill="rgb(212,95,11)" fg:x="37" fg:w="1"/><text x="65.1623%" y="431.50"></text></g><g><title>soul_lang_rust.exe`core::slice::impl$0::split_first (1 samples, 1.75%)</title><rect x="64.9123%" y="405" width="1.7544%" height="15" fill="rgb(240,179,47)" fg:x="37" fg:w="1"/><text x="65.1623%" y="415.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="66.6667%" y="597" width="1.7544%" height="15" fill="rgb(240,163,11)" fg:x="38" fg:w="1"/><text x="66.9167%" y="607.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression_group::try_get_expression_group (1 samples, 1.75%)</title><rect x="66.6667%" y="581" width="1.7544%" height="15" fill="rgb(236,37,12)" fg:x="38" fg:w="1"/><text x="66.9167%" y="591.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression_group::parse_group (1 samples, 1.75%)</title><rect x="66.6667%" y="565" width="1.7544%" height="15" fill="rgb(232,164,16)" fg:x="38" fg:w="1"/><text x="66.9167%" y="575.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="66.6667%" y="549" width="1.7544%" height="15" fill="rgb(244,205,15)" fg:x="38" fg:w="1"/><text x="66.9167%" y="559.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::inner_get_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="66.6667%" y="533" width="1.7544%" height="15" fill="rgb(223,117,47)" fg:x="38" fg:w="1"/><text x="66.9167%" y="543.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::convert_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, soul_lang_rust::steps::parser::get_expressions::parse_expression::ExpressionStacks*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="66.6667%" y="517" width="1.7544%" height="15" fill="rgb(244,107,35)" fg:x="38" fg:w="1"/><text x="66.9167%" y="527.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::get_operator (1 samples, 1.75%)</title><rect x="66.6667%" y="501" width="1.7544%" height="15" fill="rgb(205,140,8)" fg:x="38" fg:w="1"/><text x="66.9167%" y="511.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::expression::OperatorKind&gt;::from_str(ref$ (1 samples, 1.75%)</title><rect x="66.6667%" y="485" width="1.7544%" height="15" fill="rgb(228,84,46)" fg:x="38" fg:w="1"/><text x="66.9167%" y="495.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::expression::BinOpKind::from_str(ref$ (1 samples, 1.75%)</title><rect x="66.6667%" y="469" width="1.7544%" height="15" fill="rgb(254,188,9)" fg:x="38" fg:w="1"/><text x="66.9167%" y="479.50"></text></g><g><title>soul_lang_rust.exe`once_cell::sync::impl$12::deref(once_cell::sync::Lazy&lt;soul_lang_rust::soul_names::SoulNames,soul_lang_rust::soul_names::SoulNames (*) (1 samples, 1.75%)</title><rect x="66.6667%" y="453" width="1.7544%" height="15" fill="rgb(206,112,54)" fg:x="38" fg:w="1"/><text x="66.9167%" y="463.50"></text></g><g><title>soul_lang_rust.exe`core::str::traits::impl$1::eq(ref$&lt;str$&gt;, ref$ (1 samples, 1.75%)</title><rect x="66.6667%" y="437" width="1.7544%" height="15" fill="rgb(216,84,49)" fg:x="38" fg:w="1"/><text x="66.9167%" y="447.50"></text></g><g><title>soul_lang_rust.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="66.6667%" y="421" width="1.7544%" height="15" fill="rgb(214,194,35)" fg:x="38" fg:w="1"/><text x="66.9167%" y="431.50"></text></g><g><title>soul_lang_rust.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="66.6667%" y="405" width="1.7544%" height="15" fill="rgb(249,28,3)" fg:x="38" fg:w="1"/><text x="66.9167%" y="415.50"></text></g><g><title>soul_lang_rust.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="66.6667%" y="389" width="1.7544%" height="15" fill="rgb(222,56,52)" fg:x="38" fg:w="1"/><text x="66.9167%" y="399.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::soul_names::SoulNames::get_name&lt;soul_lang_rust::soul_names::NamesOperator&gt; (1 samples, 1.75%)</title><rect x="66.6667%" y="373" width="1.7544%" height="15" fill="rgb(245,217,50)" fg:x="38" fg:w="1"/><text x="66.9167%" y="383.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::soul_names::impl$16::get_name (1 samples, 1.75%)</title><rect x="66.6667%" y="357" width="1.7544%" height="15" fill="rgb(213,201,24)" fg:x="38" fg:w="1"/><text x="66.9167%" y="367.50"></text></g><g><title>soul_lang_rust.exe`std::collections::hash::map::HashMap&lt;soul_lang_rust::soul_names::NamesOperator,ref$&lt;str$&gt;,std::hash::random::RandomState&gt;::get (1 samples, 1.75%)</title><rect x="66.6667%" y="341" width="1.7544%" height="15" fill="rgb(248,116,28)" fg:x="38" fg:w="1"/><text x="66.9167%" y="351.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::map::HashMap&lt;soul_lang_rust::soul_names::NamesOperator,ref$&lt;str$&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get (1 samples, 1.75%)</title><rect x="66.6667%" y="325" width="1.7544%" height="15" fill="rgb(219,72,43)" fg:x="38" fg:w="1"/><text x="66.9167%" y="335.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::map::HashMap&lt;soul_lang_rust::soul_names::NamesOperator,ref$&lt;str$&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner (1 samples, 1.75%)</title><rect x="66.6667%" y="309" width="1.7544%" height="15" fill="rgb(209,138,14)" fg:x="38" fg:w="1"/><text x="66.9167%" y="319.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::raw::RawTable&lt;tuple$&lt;soul_lang_rust::soul_names::NamesOperator,ref$&lt;str$&gt; &gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;soul_lang_rust::soul_names::NamesOperator,soul_lang_rust::soul_names::NamesOperator,ref$ (1 samples, 1.75%)</title><rect x="66.6667%" y="293" width="1.7544%" height="15" fill="rgb(222,18,33)" fg:x="38" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::raw::RawTable&lt;tuple$&lt;soul_lang_rust::soul_names::NamesOperator,ref$&lt;str$&gt; &gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;soul_lang_rust::soul_names::NamesOperator,soul_lang_rust::soul_names::NamesOperator,ref$ (1 samples, 1.75%)</title><rect x="66.6667%" y="277" width="1.7544%" height="15" fill="rgb(213,199,7)" fg:x="38" fg:w="1"/><text x="66.9167%" y="287.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (1 samples, 1.75%)</title><rect x="66.6667%" y="261" width="1.7544%" height="15" fill="rgb(250,110,10)" fg:x="38" fg:w="1"/><text x="66.9167%" y="271.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::control::tag::Tag::full (1 samples, 1.75%)</title><rect x="66.6667%" y="245" width="1.7544%" height="15" fill="rgb(248,123,6)" fg:x="38" fg:w="1"/><text x="66.9167%" y="255.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::get_operator (1 samples, 1.75%)</title><rect x="68.4211%" y="597" width="1.7544%" height="15" fill="rgb(206,91,31)" fg:x="39" fg:w="1"/><text x="68.6711%" y="607.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::expression::OperatorKind&gt;::from_str(ref$ (1 samples, 1.75%)</title><rect x="68.4211%" y="581" width="1.7544%" height="15" fill="rgb(211,154,13)" fg:x="39" fg:w="1"/><text x="68.6711%" y="591.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::expression::BinOpKind::from_str(ref$ (1 samples, 1.75%)</title><rect x="68.4211%" y="565" width="1.7544%" height="15" fill="rgb(225,148,7)" fg:x="39" fg:w="1"/><text x="68.6711%" y="575.50"></text></g><g><title>soul_lang_rust.exe`once_cell::sync::impl$12::deref(once_cell::sync::Lazy&lt;soul_lang_rust::soul_names::SoulNames,soul_lang_rust::soul_names::SoulNames (*) (1 samples, 1.75%)</title><rect x="68.4211%" y="549" width="1.7544%" height="15" fill="rgb(220,160,43)" fg:x="39" fg:w="1"/><text x="68.6711%" y="559.50"></text></g><g><title>soul_lang_rust.exe`core::str::traits::impl$1::eq(ref$&lt;str$&gt;, ref$ (1 samples, 1.75%)</title><rect x="68.4211%" y="533" width="1.7544%" height="15" fill="rgb(213,52,39)" fg:x="39" fg:w="1"/><text x="68.6711%" y="543.50"></text></g><g><title>soul_lang_rust.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;u8&gt; &gt;*, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="68.4211%" y="517" width="1.7544%" height="15" fill="rgb(243,137,7)" fg:x="39" fg:w="1"/><text x="68.6711%" y="527.50"></text></g><g><title>soul_lang_rust.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="68.4211%" y="501" width="1.7544%" height="15" fill="rgb(230,79,13)" fg:x="39" fg:w="1"/><text x="68.6711%" y="511.50"></text></g><g><title>soul_lang_rust.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="68.4211%" y="485" width="1.7544%" height="15" fill="rgb(247,105,23)" fg:x="39" fg:w="1"/><text x="68.6711%" y="495.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::soul_names::SoulNames::get_name&lt;soul_lang_rust::soul_names::NamesOperator&gt; (1 samples, 1.75%)</title><rect x="68.4211%" y="469" width="1.7544%" height="15" fill="rgb(223,179,41)" fg:x="39" fg:w="1"/><text x="68.6711%" y="479.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::soul_names::impl$16::get_name (1 samples, 1.75%)</title><rect x="68.4211%" y="453" width="1.7544%" height="15" fill="rgb(218,9,34)" fg:x="39" fg:w="1"/><text x="68.6711%" y="463.50"></text></g><g><title>soul_lang_rust.exe`std::collections::hash::map::HashMap&lt;soul_lang_rust::soul_names::NamesOperator,ref$&lt;str$&gt;,std::hash::random::RandomState&gt;::get (1 samples, 1.75%)</title><rect x="68.4211%" y="437" width="1.7544%" height="15" fill="rgb(222,106,8)" fg:x="39" fg:w="1"/><text x="68.6711%" y="447.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::map::HashMap&lt;soul_lang_rust::soul_names::NamesOperator,ref$&lt;str$&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get (1 samples, 1.75%)</title><rect x="68.4211%" y="421" width="1.7544%" height="15" fill="rgb(211,220,0)" fg:x="39" fg:w="1"/><text x="68.6711%" y="431.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::map::HashMap&lt;soul_lang_rust::soul_names::NamesOperator,ref$&lt;str$&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner (1 samples, 1.75%)</title><rect x="68.4211%" y="405" width="1.7544%" height="15" fill="rgb(229,52,16)" fg:x="39" fg:w="1"/><text x="68.6711%" y="415.50"></text></g><g><title>soul_lang_rust.exe`hashbrown::map::make_hash (1 samples, 1.75%)</title><rect x="68.4211%" y="389" width="1.7544%" height="15" fill="rgb(212,155,18)" fg:x="39" fg:w="1"/><text x="68.6711%" y="399.50"></text></g><g><title>soul_lang_rust.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;soul_lang_rust::soul_names::NamesOperator&gt; &gt; (1 samples, 1.75%)</title><rect x="68.4211%" y="373" width="1.7544%" height="15" fill="rgb(242,21,14)" fg:x="39" fg:w="1"/><text x="68.6711%" y="383.50"></text></g><g><title>soul_lang_rust.exe`std::hash::random::impl$4::finish (1 samples, 1.75%)</title><rect x="68.4211%" y="357" width="1.7544%" height="15" fill="rgb(222,19,48)" fg:x="39" fg:w="1"/><text x="68.6711%" y="367.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::impl$4::finish (1 samples, 1.75%)</title><rect x="68.4211%" y="341" width="1.7544%" height="15" fill="rgb(232,45,27)" fg:x="39" fg:w="1"/><text x="68.6711%" y="351.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1 samples, 1.75%)</title><rect x="68.4211%" y="325" width="1.7544%" height="15" fill="rgb(249,103,42)" fg:x="39" fg:w="1"/><text x="68.6711%" y="335.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="68.4211%" y="309" width="1.7544%" height="15" fill="rgb(246,81,33)" fg:x="39" fg:w="1"/><text x="68.6711%" y="319.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;soul_lang_rust::utils::node_ref::NodeRef (3 samples, 5.26%)</title><rect x="66.6667%" y="661" width="5.2632%" height="15" fill="rgb(252,33,42)" fg:x="38" fg:w="3"/><text x="66.9167%" y="671.50">soul_l..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_var_decl_assign::get_var_decl (3 samples, 5.26%)</title><rect x="66.6667%" y="645" width="5.2632%" height="15" fill="rgb(209,212,41)" fg:x="38" fg:w="3"/><text x="66.9167%" y="655.50">soul_l..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::inner_get_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, ref$&lt;slice2$&lt;ref$ (3 samples, 5.26%)</title><rect x="66.6667%" y="629" width="5.2632%" height="15" fill="rgb(207,154,6)" fg:x="38" fg:w="3"/><text x="66.9167%" y="639.50">soul_l..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::convert_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, soul_lang_rust::steps::parser::get_expressions::parse_expression::ExpressionStacks*, ref$&lt;slice2$&lt;ref$ (3 samples, 5.26%)</title><rect x="66.6667%" y="613" width="5.2632%" height="15" fill="rgb(223,64,47)" fg:x="38" fg:w="3"/><text x="66.9167%" y="623.50">soul_l..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::try_get_literal (1 samples, 1.75%)</title><rect x="70.1754%" y="597" width="1.7544%" height="15" fill="rgb(211,161,38)" fg:x="40" fg:w="1"/><text x="70.4254%" y="607.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::impl$0::try_from_stream (1 samples, 1.75%)</title><rect x="70.1754%" y="581" width="1.7544%" height="15" fill="rgb(219,138,40)" fg:x="40" fg:w="1"/><text x="70.4254%" y="591.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::Literal&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::is_err (1 samples, 1.75%)</title><rect x="70.1754%" y="565" width="1.7544%" height="15" fill="rgb(241,228,46)" fg:x="40" fg:w="1"/><text x="70.4254%" y="575.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::Literal&gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::is_ok (1 samples, 1.75%)</title><rect x="70.1754%" y="549" width="1.7544%" height="15" fill="rgb(223,209,38)" fg:x="40" fg:w="1"/><text x="70.4254%" y="559.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::inner_from_stream (1 samples, 1.75%)</title><rect x="70.1754%" y="533" width="1.7544%" height="15" fill="rgb(236,164,45)" fg:x="40" fg:w="1"/><text x="70.4254%" y="543.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::pick_tuple (1 samples, 1.75%)</title><rect x="70.1754%" y="517" width="1.7544%" height="15" fill="rgb(231,15,5)" fg:x="40" fg:w="1"/><text x="70.4254%" y="527.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::literal::get_literal::get_tuple (1 samples, 1.75%)</title><rect x="70.1754%" y="501" width="1.7544%" height="15" fill="rgb(252,35,15)" fg:x="40" fg:w="1"/><text x="70.4254%" y="511.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::Literal&gt;::new_tuple(alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="70.1754%" y="485" width="1.7544%" height="15" fill="rgb(248,181,18)" fg:x="40" fg:w="1"/><text x="70.4254%" y="495.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::LiteralType&gt; &gt;(enum2$ (1 samples, 1.75%)</title><rect x="70.1754%" y="469" width="1.7544%" height="15" fill="rgb(233,39,42)" fg:x="40" fg:w="1"/><text x="70.4254%" y="479.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;enum2$ (1 samples, 1.75%)</title><rect x="70.1754%" y="453" width="1.7544%" height="15" fill="rgb(238,110,33)" fg:x="40" fg:w="1"/><text x="70.4254%" y="463.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;enum2$ (1 samples, 1.75%)</title><rect x="70.1754%" y="437" width="1.7544%" height="15" fill="rgb(233,195,10)" fg:x="40" fg:w="1"/><text x="70.4254%" y="447.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;enum2$ (1 samples, 1.75%)</title><rect x="70.1754%" y="421" width="1.7544%" height="15" fill="rgb(254,105,3)" fg:x="40" fg:w="1"/><text x="70.4254%" y="431.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place&lt;slice2$&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::literal::LiteralType&gt; &gt; &gt;(ptr_mut$&lt;slice2$&lt;enum2$ (1 samples, 1.75%)</title><rect x="70.1754%" y="405" width="1.7544%" height="15" fill="rgb(221,225,9)" fg:x="40" fg:w="1"/><text x="70.4254%" y="415.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (7 samples, 12.28%)</title><rect x="61.4035%" y="693" width="12.2807%" height="15" fill="rgb(224,227,45)" fg:x="35" fg:w="7"/><text x="61.6535%" y="703.50">soul_lang_rust.exe..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_statment::get_statment(enum2$ (7 samples, 12.28%)</title><rect x="61.4035%" y="677" width="12.2807%" height="15" fill="rgb(229,198,43)" fg:x="35" fg:w="7"/><text x="61.6535%" y="687.50">soul_lang_rust.exe..</text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;tuple$ (1 samples, 1.75%)</title><rect x="71.9298%" y="661" width="1.7544%" height="15" fill="rgb(206,209,35)" fg:x="41" fg:w="1"/><text x="72.1798%" y="671.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_statment::add_else(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, enum2$ (1 samples, 1.75%)</title><rect x="71.9298%" y="645" width="1.7544%" height="15" fill="rgb(245,195,53)" fg:x="41" fg:w="1"/><text x="72.1798%" y="655.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::function::Parameter&gt;,alloc::alloc::Global&gt;::new (1 samples, 1.75%)</title><rect x="71.9298%" y="629" width="1.7544%" height="15" fill="rgb(240,92,26)" fg:x="41" fg:w="1"/><text x="72.1798%" y="639.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_block::get_block(soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeVisibility, soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::SoulThis&gt; &gt; &gt;, alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (1 samples, 1.75%)</title><rect x="71.9298%" y="613" width="1.7544%" height="15" fill="rgb(207,40,23)" fg:x="41" fg:w="1"/><text x="72.1798%" y="623.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="71.9298%" y="597" width="1.7544%" height="15" fill="rgb(223,111,35)" fg:x="41" fg:w="1"/><text x="72.1798%" y="607.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_statment::get_statment(enum2$ (1 samples, 1.75%)</title><rect x="71.9298%" y="581" width="1.7544%" height="15" fill="rgb(229,147,28)" fg:x="41" fg:w="1"/><text x="72.1798%" y="591.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="71.9298%" y="565" width="1.7544%" height="15" fill="rgb(211,29,28)" fg:x="41" fg:w="1"/><text x="72.1798%" y="575.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::inner_get_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="71.9298%" y="549" width="1.7544%" height="15" fill="rgb(228,72,33)" fg:x="41" fg:w="1"/><text x="72.1798%" y="559.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_expressions::parse_expression::convert_expression(soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, soul_lang_rust::steps::parser::get_expressions::parse_expression::ExpressionStacks*, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="71.9298%" y="533" width="1.7544%" height="15" fill="rgb(205,214,31)" fg:x="41" fg:w="1"/><text x="72.1798%" y="543.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (1 samples, 1.75%)</title><rect x="71.9298%" y="517" width="1.7544%" height="15" fill="rgb(224,111,15)" fg:x="41" fg:w="1"/><text x="72.1798%" y="527.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (9 samples, 15.79%)</title><rect x="59.6491%" y="789" width="15.7895%" height="15" fill="rgb(253,21,26)" fg:x="34" fg:w="9"/><text x="59.8991%" y="799.50">soul_lang_rust.exe`core:..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_statment::get_statment(enum2$ (9 samples, 15.79%)</title><rect x="59.6491%" y="773" width="15.7895%" height="15" fill="rgb(245,139,43)" fg:x="34" fg:w="9"/><text x="59.8991%" y="783.50">soul_lang_rust.exe`soul_..</text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (8 samples, 14.04%)</title><rect x="61.4035%" y="757" width="14.0351%" height="15" fill="rgb(252,170,7)" fg:x="35" fg:w="8"/><text x="61.6535%" y="767.50">soul_lang_rust.exe`co..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_function_decl::get_function_decl(enum2$&lt;core::option::Option&lt;ref$ (8 samples, 14.04%)</title><rect x="61.4035%" y="741" width="14.0351%" height="15" fill="rgb(231,118,14)" fg:x="35" fg:w="8"/><text x="61.6535%" y="751.50">soul_lang_rust.exe`so..</text></g><g><title>soul_lang_rust.exe`core::option::impl$5::clone(enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (8 samples, 14.04%)</title><rect x="61.4035%" y="725" width="14.0351%" height="15" fill="rgb(238,83,0)" fg:x="35" fg:w="8"/><text x="61.6535%" y="735.50">soul_lang_rust.exe`co..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::get_statments::parse_block::get_block(soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeVisibility, soul_lang_rust::steps::step_interfaces::i_tokenizer::TokenStream*, soul_lang_rust::steps::step_interfaces::i_parser::scope::ScopeBuilder*, enum2$&lt;core::option::Option&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::SoulThis&gt; &gt; &gt;, alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned (8 samples, 14.04%)</title><rect x="61.4035%" y="709" width="14.0351%" height="15" fill="rgb(221,39,39)" fg:x="35" fg:w="8"/><text x="61.6535%" y="719.50">soul_lang_rust.exe`so..</text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;tuple$ (1 samples, 1.75%)</title><rect x="73.6842%" y="693" width="1.7544%" height="15" fill="rgb(222,119,46)" fg:x="42" fg:w="1"/><text x="73.9342%" y="703.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::abstract_syntax_tree::StatmentBuilder&gt;::try_push(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="73.6842%" y="677" width="1.7544%" height="15" fill="rgb(222,165,49)" fg:x="42" fg:w="1"/><text x="73.9342%" y="687.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::StmtKind&gt; &gt;,alloc::alloc::Global&gt;::push(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="73.6842%" y="661" width="1.7544%" height="15" fill="rgb(219,113,52)" fg:x="42" fg:w="1"/><text x="73.9342%" y="671.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::mut_ptr::impl$0::add(soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$ (1 samples, 1.75%)</title><rect x="73.6842%" y="645" width="1.7544%" height="15" fill="rgb(214,7,15)" fg:x="42" fg:w="1"/><text x="73.9342%" y="655.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVec&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::StmtKind&gt; &gt;,alloc::alloc::Global&gt;::grow_one&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::spanned::Spanned&lt;enum2$&lt;soul_lang_rust::steps::step_interfaces::i_parser::abstract_syntax_tree::staments::statment::StmtKind&gt; &gt;,alloc::alloc::Global&gt; (1 samples, 1.75%)</title><rect x="73.6842%" y="629" width="1.7544%" height="15" fill="rgb(235,32,4)" fg:x="42" fg:w="1"/><text x="73.9342%" y="639.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1 samples, 1.75%)</title><rect x="73.6842%" y="613" width="1.7544%" height="15" fill="rgb(238,90,54)" fg:x="42" fg:w="1"/><text x="73.9342%" y="623.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1 samples, 1.75%)</title><rect x="73.6842%" y="597" width="1.7544%" height="15" fill="rgb(213,208,19)" fg:x="42" fg:w="1"/><text x="73.9342%" y="607.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1 samples, 1.75%)</title><rect x="73.6842%" y="581" width="1.7544%" height="15" fill="rgb(233,156,4)" fg:x="42" fg:w="1"/><text x="73.9342%" y="591.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="73.6842%" y="565" width="1.7544%" height="15" fill="rgb(207,194,5)" fg:x="42" fg:w="1"/><text x="73.9342%" y="575.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="73.6842%" y="549" width="1.7544%" height="15" fill="rgb(206,111,30)" fg:x="42" fg:w="1"/><text x="73.9342%" y="559.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="73.6842%" y="533" width="1.7544%" height="15" fill="rgb(243,70,54)" fg:x="42" fg:w="1"/><text x="73.9342%" y="543.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="73.6842%" y="517" width="1.7544%" height="15" fill="rgb(242,28,8)" fg:x="42" fg:w="1"/><text x="73.9342%" y="527.50"></text></g><g><title>`0x7FFF98628F8D (1 samples, 1.75%)</title><rect x="73.6842%" y="501" width="1.7544%" height="15" fill="rgb(219,106,18)" fg:x="42" fg:w="1"/><text x="73.9342%" y="511.50"></text></g><g><title>`0x7FFF98629235 (1 samples, 1.75%)</title><rect x="73.6842%" y="485" width="1.7544%" height="15" fill="rgb(244,222,10)" fg:x="42" fg:w="1"/><text x="73.9342%" y="495.50"></text></g><g><title>`0x7FFF9862A07D (1 samples, 1.75%)</title><rect x="73.6842%" y="469" width="1.7544%" height="15" fill="rgb(236,179,52)" fg:x="42" fg:w="1"/><text x="73.9342%" y="479.50"></text></g><g><title>`0x7FFF985EF164 (1 samples, 1.75%)</title><rect x="73.6842%" y="453" width="1.7544%" height="15" fill="rgb(213,23,39)" fg:x="42" fg:w="1"/><text x="73.9342%" y="463.50"></text></g><g><title>`0x7FFF985EF591 (1 samples, 1.75%)</title><rect x="73.6842%" y="437" width="1.7544%" height="15" fill="rgb(238,48,10)" fg:x="42" fg:w="1"/><text x="73.9342%" y="447.50"></text></g><g><title>`0x7FFF9862643F (1 samples, 1.75%)</title><rect x="73.6842%" y="421" width="1.7544%" height="15" fill="rgb(251,196,23)" fg:x="42" fg:w="1"/><text x="73.9342%" y="431.50"></text></g><g><title>`0x7FFF9862513C (1 samples, 1.75%)</title><rect x="73.6842%" y="405" width="1.7544%" height="15" fill="rgb(250,152,24)" fg:x="42" fg:w="1"/><text x="73.9342%" y="415.50"></text></g><g><title>`0x7FFF9862517C (1 samples, 1.75%)</title><rect x="73.6842%" y="389" width="1.7544%" height="15" fill="rgb(209,150,17)" fg:x="42" fg:w="1"/><text x="73.9342%" y="399.50"></text></g><g><title>`0x7FFF986251E5 (1 samples, 1.75%)</title><rect x="73.6842%" y="373" width="1.7544%" height="15" fill="rgb(234,202,34)" fg:x="42" fg:w="1"/><text x="73.9342%" y="383.50"></text></g><g><title>soul_lang_rust.exe`alloc::string::String::with_capacity (1 samples, 1.75%)</title><rect x="75.4386%" y="693" width="1.7544%" height="15" fill="rgb(253,148,53)" fg:x="43" fg:w="1"/><text x="75.6886%" y="703.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec::with_capacity (1 samples, 1.75%)</title><rect x="75.4386%" y="677" width="1.7544%" height="15" fill="rgb(218,129,16)" fg:x="43" fg:w="1"/><text x="75.6886%" y="687.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec::with_capacity_in (1 samples, 1.75%)</title><rect x="75.4386%" y="661" width="1.7544%" height="15" fill="rgb(216,85,19)" fg:x="43" fg:w="1"/><text x="75.6886%" y="671.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVec::with_capacity_in (1 samples, 1.75%)</title><rect x="75.4386%" y="645" width="1.7544%" height="15" fill="rgb(235,228,7)" fg:x="43" fg:w="1"/><text x="75.6886%" y="655.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner::with_capacity_in (1 samples, 1.75%)</title><rect x="75.4386%" y="629" width="1.7544%" height="15" fill="rgb(245,175,0)" fg:x="43" fg:w="1"/><text x="75.6886%" y="639.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner::try_allocate_in (1 samples, 1.75%)</title><rect x="75.4386%" y="613" width="1.7544%" height="15" fill="rgb(208,168,36)" fg:x="43" fg:w="1"/><text x="75.6886%" y="623.50"></text></g><g><title>`0x7FFF985EF164 (1 samples, 1.75%)</title><rect x="75.4386%" y="597" width="1.7544%" height="15" fill="rgb(246,171,24)" fg:x="43" fg:w="1"/><text x="75.6886%" y="607.50"></text></g><g><title>`0x7FFF985EF2A4 (1 samples, 1.75%)</title><rect x="75.4386%" y="581" width="1.7544%" height="15" fill="rgb(215,142,24)" fg:x="43" fg:w="1"/><text x="75.6886%" y="591.50"></text></g><g><title>`0x7FFF985EFB41 (1 samples, 1.75%)</title><rect x="75.4386%" y="565" width="1.7544%" height="15" fill="rgb(250,187,7)" fg:x="43" fg:w="1"/><text x="75.6886%" y="575.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::option::Option&lt;ref$&lt;str$&gt; &gt; &gt;::expect(enum2$&lt;core::option::Option&lt;ref$&lt;str$&gt; &gt; &gt;, ref$ (2 samples, 3.51%)</title><rect x="75.4386%" y="725" width="3.5088%" height="15" fill="rgb(228,66,33)" fg:x="43" fg:w="2"/><text x="75.6886%" y="735.50">sou..</text></g><g><title>soul_lang_rust.exe`alloc::fmt::format::format_inner (2 samples, 3.51%)</title><rect x="75.4386%" y="709" width="3.5088%" height="15" fill="rgb(234,215,21)" fg:x="43" fg:w="2"/><text x="75.6886%" y="719.50">sou..</text></g><g><title>soul_lang_rust.exe`core::result::Result::expect (1 samples, 1.75%)</title><rect x="77.1930%" y="693" width="1.7544%" height="15" fill="rgb(222,191,20)" fg:x="44" fg:w="1"/><text x="77.4430%" y="703.50"></text></g><g><title>soul_lang_rust.exe`core::fmt::write (1 samples, 1.75%)</title><rect x="77.1930%" y="677" width="1.7544%" height="15" fill="rgb(245,79,54)" fg:x="44" fg:w="1"/><text x="77.4430%" y="687.50"></text></g><g><title>soul_lang_rust.exe`alloc::string::impl$58::write_str (1 samples, 1.75%)</title><rect x="77.1930%" y="661" width="1.7544%" height="15" fill="rgb(240,10,37)" fg:x="44" fg:w="1"/><text x="77.4430%" y="671.50"></text></g><g><title>soul_lang_rust.exe`alloc::string::String::push_str (1 samples, 1.75%)</title><rect x="77.1930%" y="645" width="1.7544%" height="15" fill="rgb(214,192,32)" fg:x="44" fg:w="1"/><text x="77.4430%" y="655.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec::extend_from_slice (1 samples, 1.75%)</title><rect x="77.1930%" y="629" width="1.7544%" height="15" fill="rgb(209,36,54)" fg:x="44" fg:w="1"/><text x="77.4430%" y="639.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::spec_extend::impl$4::spec_extend (1 samples, 1.75%)</title><rect x="77.1930%" y="613" width="1.7544%" height="15" fill="rgb(220,10,11)" fg:x="44" fg:w="1"/><text x="77.4430%" y="623.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec::append_elements (1 samples, 1.75%)</title><rect x="77.1930%" y="597" width="1.7544%" height="15" fill="rgb(221,106,17)" fg:x="44" fg:w="1"/><text x="77.4430%" y="607.50"></text></g><g><title>`0x7FFF7886FD64 (1 samples, 1.75%)</title><rect x="77.1930%" y="581" width="1.7544%" height="15" fill="rgb(251,142,44)" fg:x="44" fg:w="1"/><text x="77.4430%" y="591.50"></text></g><g><title>soul_lang_rust.exe`std::hash::random::impl$1::build_hasher (1 samples, 1.75%)</title><rect x="78.9474%" y="629" width="1.7544%" height="15" fill="rgb(238,13,15)" fg:x="45" fg:w="1"/><text x="79.1974%" y="639.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::SipHasher13::new_with_keys (1 samples, 1.75%)</title><rect x="78.9474%" y="613" width="1.7544%" height="15" fill="rgb(208,107,27)" fg:x="45" fg:w="1"/><text x="79.1974%" y="623.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys (1 samples, 1.75%)</title><rect x="78.9474%" y="597" width="1.7544%" height="15" fill="rgb(205,136,37)" fg:x="45" fg:w="1"/><text x="79.1974%" y="607.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset (1 samples, 1.75%)</title><rect x="78.9474%" y="581" width="1.7544%" height="15" fill="rgb(250,205,27)" fg:x="45" fg:w="1"/><text x="79.1974%" y="591.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::parser (13 samples, 22.81%)</title><rect x="59.6491%" y="837" width="22.8070%" height="15" fill="rgb(210,80,43)" fg:x="34" fg:w="13"/><text x="59.8991%" y="847.50">soul_lang_rust.exe`soul_lang_rust::p..</text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (13 samples, 22.81%)</title><rect x="59.6491%" y="821" width="22.8070%" height="15" fill="rgb(247,160,36)" fg:x="34" fg:w="13"/><text x="59.8991%" y="831.50">soul_lang_rust.exe`core::result::imp..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::parse::parse_tokens (13 samples, 22.81%)</title><rect x="59.6491%" y="805" width="22.8070%" height="15" fill="rgb(234,13,49)" fg:x="34" fg:w="13"/><text x="59.8991%" y="815.50">soul_lang_rust.exe`soul_lang_rust::s..</text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_parser::scope::InnerScopeBuilder&lt;enum2$ (4 samples, 7.02%)</title><rect x="75.4386%" y="789" width="7.0175%" height="15" fill="rgb(234,122,0)" fg:x="43" fg:w="4"/><text x="75.6886%" y="799.50">soul_lang..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::forward_type_stack::get_type_stack::forward_declarde_type_stack (4 samples, 7.02%)</title><rect x="75.4386%" y="773" width="7.0175%" height="15" fill="rgb(207,146,38)" fg:x="43" fg:w="4"/><text x="75.6886%" y="783.50">soul_lang..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::parser::forward_type_stack::get_type_stack::parse_type(soul_lang_rust::steps::step_interfaces::i_parser::scope::InnerScopeBuilder&lt;enum2$ (4 samples, 7.02%)</title><rect x="75.4386%" y="757" width="7.0175%" height="15" fill="rgb(207,177,25)" fg:x="43" fg:w="4"/><text x="75.6886%" y="767.50">soul_lang..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::soul_names::SoulNames::get_name&lt;soul_lang_rust::soul_names::NamesOtherKeyWords&gt; (4 samples, 7.02%)</title><rect x="75.4386%" y="741" width="7.0175%" height="15" fill="rgb(211,178,42)" fg:x="43" fg:w="4"/><text x="75.6886%" y="751.50">soul_lang..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::soul_names::impl$8::get_name (2 samples, 3.51%)</title><rect x="78.9474%" y="725" width="3.5088%" height="15" fill="rgb(230,69,54)" fg:x="45" fg:w="2"/><text x="79.1974%" y="735.50">sou..</text></g><g><title>soul_lang_rust.exe`std::collections::hash::map::HashMap&lt;soul_lang_rust::soul_names::NamesOtherKeyWords,ref$&lt;str$&gt;,std::hash::random::RandomState&gt;::get (2 samples, 3.51%)</title><rect x="78.9474%" y="709" width="3.5088%" height="15" fill="rgb(214,135,41)" fg:x="45" fg:w="2"/><text x="79.1974%" y="719.50">sou..</text></g><g><title>soul_lang_rust.exe`hashbrown::map::HashMap&lt;soul_lang_rust::soul_names::NamesOtherKeyWords,ref$&lt;str$&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get (2 samples, 3.51%)</title><rect x="78.9474%" y="693" width="3.5088%" height="15" fill="rgb(237,67,25)" fg:x="45" fg:w="2"/><text x="79.1974%" y="703.50">sou..</text></g><g><title>soul_lang_rust.exe`hashbrown::map::HashMap&lt;soul_lang_rust::soul_names::NamesOtherKeyWords,ref$&lt;str$&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner (2 samples, 3.51%)</title><rect x="78.9474%" y="677" width="3.5088%" height="15" fill="rgb(222,189,50)" fg:x="45" fg:w="2"/><text x="79.1974%" y="687.50">sou..</text></g><g><title>soul_lang_rust.exe`hashbrown::map::make_hash (2 samples, 3.51%)</title><rect x="78.9474%" y="661" width="3.5088%" height="15" fill="rgb(245,148,34)" fg:x="45" fg:w="2"/><text x="79.1974%" y="671.50">sou..</text></g><g><title>soul_lang_rust.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;soul_lang_rust::soul_names::NamesOperator&gt; &gt; (2 samples, 3.51%)</title><rect x="78.9474%" y="645" width="3.5088%" height="15" fill="rgb(222,29,6)" fg:x="45" fg:w="2"/><text x="79.1974%" y="655.50">sou..</text></g><g><title>soul_lang_rust.exe`std::hash::random::impl$4::finish (1 samples, 1.75%)</title><rect x="80.7018%" y="629" width="1.7544%" height="15" fill="rgb(221,189,43)" fg:x="46" fg:w="1"/><text x="80.9518%" y="639.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::impl$4::finish (1 samples, 1.75%)</title><rect x="80.7018%" y="613" width="1.7544%" height="15" fill="rgb(207,36,27)" fg:x="46" fg:w="1"/><text x="80.9518%" y="623.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1 samples, 1.75%)</title><rect x="80.7018%" y="597" width="1.7544%" height="15" fill="rgb(217,90,24)" fg:x="46" fg:w="1"/><text x="80.9518%" y="607.50"></text></g><g><title>soul_lang_rust.exe`core::hash::sip::impl$5::write&lt;core::hash::sip::Sip13Rounds&gt;(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="80.7018%" y="581" width="1.7544%" height="15" fill="rgb(224,66,35)" fg:x="46" fg:w="1"/><text x="80.9518%" y="591.50"></text></g><g><title>soul_lang_rust.exe`alloc::str::impl$5::replace(ref$&lt;str$&gt;, ref$&lt;str$&gt;, ref$ (1 samples, 1.75%)</title><rect x="82.4561%" y="789" width="1.7544%" height="15" fill="rgb(221,13,50)" fg:x="47" fg:w="1"/><text x="82.7061%" y="799.50"></text></g><g><title>soul_lang_rust.exe`core::str::impl$0::match_indices(ref$&lt;str$&gt;, ref$ (1 samples, 1.75%)</title><rect x="82.4561%" y="773" width="1.7544%" height="15" fill="rgb(236,68,49)" fg:x="47" fg:w="1"/><text x="82.7061%" y="783.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_source_reader::FileLine,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;soul_lang_rust::steps::step_interfaces::i_source_reader::FileLine,soul_lang_rust::errors::soul_error::SoulError&gt; &gt;, soul_lang_rust::steps::source_reader::source_reader::read_source_file::closure_env$1 (1 samples, 1.75%)</title><rect x="84.2105%" y="789" width="1.7544%" height="15" fill="rgb(229,146,28)" fg:x="48" fg:w="1"/><text x="84.4605%" y="799.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::source_reader::c_str::format_stringer::format_string (1 samples, 1.75%)</title><rect x="84.2105%" y="773" width="1.7544%" height="15" fill="rgb(225,31,38)" fg:x="48" fg:w="1"/><text x="84.4605%" y="783.50"></text></g><g><title>`0x7FFF98675493 (1 samples, 1.75%)</title><rect x="84.2105%" y="757" width="1.7544%" height="15" fill="rgb(250,208,3)" fg:x="48" fg:w="1"/><text x="84.4605%" y="767.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="773" width="1.7544%" height="15" fill="rgb(246,54,23)" fg:x="49" fg:w="1"/><text x="86.2149%" y="783.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="757" width="1.7544%" height="15" fill="rgb(243,76,11)" fg:x="49" fg:w="1"/><text x="86.2149%" y="767.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec&lt;ref$&lt;str$&gt;,alloc::alloc::Global&gt;::as_slice (1 samples, 1.75%)</title><rect x="85.9649%" y="741" width="1.7544%" height="15" fill="rgb(245,21,50)" fg:x="49" fg:w="1"/><text x="86.2149%" y="751.50"></text></g><g><title>soul_lang_rust.exe`once_cell::imp::OnceCell&lt;soul_lang_rust::soul_names::SoulNames&gt;::initialize&lt;soul_lang_rust::soul_names::SoulNames,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,once_cell::sync::impl$11::force::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,soul_lang_rust::soul_names::SoulNames (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::sync::impl$6::get_or_init::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,once_cell::sync::impl$11::force::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,soul_lang_rust::soul_names::SoulNames (*) (1 samples, 1.75%)</title><rect x="85.9649%" y="725" width="1.7544%" height="15" fill="rgb(228,9,43)" fg:x="49" fg:w="1"/><text x="86.2149%" y="735.50"></text></g><g><title>soul_lang_rust.exe`once_cell::imp::initialize_or_wait(core::sync::atomic::AtomicPtr&lt;once_cell::imp::Waiter&gt;*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;&gt;,assoc$ (1 samples, 1.75%)</title><rect x="85.9649%" y="709" width="1.7544%" height="15" fill="rgb(208,100,47)" fg:x="49" fg:w="1"/><text x="86.2149%" y="719.50"></text></g><g><title>soul_lang_rust.exe`once_cell::imp::impl$4::initialize::closure$0&lt;soul_lang_rust::soul_names::SoulNames,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,once_cell::sync::impl$11::force::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,soul_lang_rust::soul_names::SoulNames (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::imp::impl$4::initialize::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,once_cell::sync::impl$11::force::closure_env$0&lt;soul_lang_rust::soul_names::SoulNames,soul_lang_rust::soul_names::SoulNames (*)()&gt; &gt;,enum2$ (1 samples, 1.75%)</title><rect x="85.9649%" y="693" width="1.7544%" height="15" fill="rgb(232,26,8)" fg:x="49" fg:w="1"/><text x="86.2149%" y="703.50"></text></g><g><title>soul_lang_rust.exe`core::ops::function::FnOnce::call_once&lt;soul_lang_rust::soul_names::SOUL_NAMES::closure_env$0,tuple$&lt;&gt; &gt; (1 samples, 1.75%)</title><rect x="85.9649%" y="677" width="1.7544%" height="15" fill="rgb(216,166,38)" fg:x="49" fg:w="1"/><text x="86.2149%" y="687.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::soul_names::SoulNames::new (1 samples, 1.75%)</title><rect x="85.9649%" y="661" width="1.7544%" height="15" fill="rgb(251,202,51)" fg:x="49" fg:w="1"/><text x="86.2149%" y="671.50"></text></g><g><title>soul_lang_rust.exe`itertools::Itertools::sorted_by(alloc::vec::into_iter::IntoIter&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="645" width="1.7544%" height="15" fill="rgb(254,216,34)" fg:x="49" fg:w="1"/><text x="86.2149%" y="655.50"></text></g><g><title>soul_lang_rust.exe`alloc::slice::impl$0::sort_by(ref_mut$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="629" width="1.7544%" height="15" fill="rgb(251,32,27)" fg:x="49" fg:w="1"/><text x="86.2149%" y="639.50"></text></g><g><title>soul_lang_rust.exe`alloc::slice::stable_sort(ref_mut$&lt;slice2$&lt;ref$&lt;str$&gt; &gt; &gt;, alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="613" width="1.7544%" height="15" fill="rgb(208,127,28)" fg:x="49" fg:w="1"/><text x="86.2149%" y="623.50"></text></g><g><title>soul_lang_rust.exe`core::slice::sort::stable::sort(ref_mut$&lt;slice2$&lt;ref$&lt;str$&gt; &gt; &gt;, alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="597" width="1.7544%" height="15" fill="rgb(224,137,22)" fg:x="49" fg:w="1"/><text x="86.2149%" y="607.50"></text></g><g><title>soul_lang_rust.exe`core::slice::sort::stable::driftsort_main&lt;ref$&lt;str$&gt;,alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$&lt;str$&gt;,soul_lang_rust::soul_names::impl$0::new::closure_env$7&gt;,alloc::vec::Vec&lt;ref$&lt;str$&gt;,alloc::alloc::Global&gt; &gt;(ref_mut$&lt;slice2$&lt;ref$&lt;str$&gt; &gt; &gt;, alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="581" width="1.7544%" height="15" fill="rgb(254,70,32)" fg:x="49" fg:w="1"/><text x="86.2149%" y="591.50"></text></g><g><title>soul_lang_rust.exe`core::slice::sort::stable::drift::sort&lt;ref$&lt;str$&gt;,alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$&lt;str$&gt;,soul_lang_rust::soul_names::impl$0::new::closure_env$7&gt; &gt;(ref_mut$&lt;slice2$&lt;ref$&lt;str$&gt; &gt; &gt;, ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;ref$&lt;str$&gt; &gt; &gt; &gt;, bool, alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="565" width="1.7544%" height="15" fill="rgb(229,75,37)" fg:x="49" fg:w="1"/><text x="86.2149%" y="575.50"></text></g><g><title>soul_lang_rust.exe`core::slice::sort::stable::drift::create_run(ref_mut$&lt;slice2$&lt;ref$&lt;str$&gt; &gt; &gt;, ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;ref$&lt;str$&gt; &gt; &gt; &gt;, unsigned long long, bool, alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="549" width="1.7544%" height="15" fill="rgb(252,64,23)" fg:x="49" fg:w="1"/><text x="86.2149%" y="559.50"></text></g><g><title>soul_lang_rust.exe`core::slice::sort::stable::quicksort::quicksort&lt;ref$&lt;str$&gt;,alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$&lt;str$&gt;,soul_lang_rust::soul_names::impl$0::new::closure_env$7&gt; &gt;(ref_mut$&lt;slice2$&lt;ref$&lt;str$&gt; &gt; &gt;, ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;ref$&lt;str$&gt; &gt; &gt; &gt;, unsigned int, enum2$&lt;core::option::Option&lt;ref$&lt;ref$&lt;str$&gt; &gt; &gt; &gt;, alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="533" width="1.7544%" height="15" fill="rgb(232,162,48)" fg:x="49" fg:w="1"/><text x="86.2149%" y="543.50"></text></g><g><title>soul_lang_rust.exe`core::slice::sort::shared::smallsort::impl$1::small_sort(ref_mut$&lt;slice2$&lt;ref$&lt;str$&gt; &gt; &gt;, ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;ref$&lt;str$&gt; &gt; &gt; &gt;, alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="517" width="1.7544%" height="15" fill="rgb(246,160,12)" fg:x="49" fg:w="1"/><text x="86.2149%" y="527.50"></text></g><g><title>soul_lang_rust.exe`core::slice::sort::shared::smallsort::small_sort_general_with_scratch&lt;ref$&lt;str$&gt;,alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$&lt;str$&gt;,soul_lang_rust::soul_names::impl$0::new::closure_env$7&gt; &gt;(ref_mut$&lt;slice2$&lt;ref$&lt;str$&gt; &gt; &gt;, ref_mut$&lt;slice2$&lt;core::mem::maybe_uninit::MaybeUninit&lt;ref$&lt;str$&gt; &gt; &gt; &gt;, alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="85.9649%" y="501" width="1.7544%" height="15" fill="rgb(247,166,0)" fg:x="49" fg:w="1"/><text x="86.2149%" y="511.50"></text></g><g><title>soul_lang_rust.exe`core::iter::traits::iterator::Iterator::fold(core::str::iter::Matches&lt;ref$&lt;ref$&lt;str$&gt; &gt; &gt;, unsigned long long, core::iter::traits::iterator::Iterator::count::closure_env$0&lt;core::str::iter::Matches&lt;ref$&lt;ref$ (1 samples, 1.75%)</title><rect x="87.7193%" y="757" width="1.7544%" height="15" fill="rgb(249,219,21)" fg:x="50" fg:w="1"/><text x="87.9693%" y="767.50"></text></g><g><title>soul_lang_rust.exe`core::str::iter::impl$102::next(core::str::iter::Matches&lt;ref$&lt;ref$ (1 samples, 1.75%)</title><rect x="87.7193%" y="741" width="1.7544%" height="15" fill="rgb(205,209,3)" fg:x="50" fg:w="1"/><text x="87.9693%" y="751.50"></text></g><g><title>soul_lang_rust.exe`core::str::iter::MatchesInternal&lt;ref$&lt;ref$&lt;str$&gt; &gt; &gt;::next (1 samples, 1.75%)</title><rect x="87.7193%" y="725" width="1.7544%" height="15" fill="rgb(243,44,1)" fg:x="50" fg:w="1"/><text x="87.9693%" y="735.50"></text></g><g><title>soul_lang_rust.exe`core::str::pattern::impl$33::next_match (1 samples, 1.75%)</title><rect x="87.7193%" y="709" width="1.7544%" height="15" fill="rgb(206,159,16)" fg:x="50" fg:w="1"/><text x="87.9693%" y="719.50"></text></g><g><title>soul_lang_rust.exe`core::str::pattern::TwoWaySearcher::next(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="87.7193%" y="693" width="1.7544%" height="15" fill="rgb(244,77,30)" fg:x="50" fg:w="1"/><text x="87.9693%" y="703.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::source_reader(std::io::buffered::bufreader::BufReader (5 samples, 8.77%)</title><rect x="82.4561%" y="837" width="8.7719%" height="15" fill="rgb(218,69,12)" fg:x="47" fg:w="5"/><text x="82.7061%" y="847.50">soul_lang_ru..</text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (5 samples, 8.77%)</title><rect x="82.4561%" y="821" width="8.7719%" height="15" fill="rgb(212,87,7)" fg:x="47" fg:w="5"/><text x="82.7061%" y="831.50">soul_lang_ru..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::source_reader::source_reader::read_source_file&lt;std::fs::File&gt;(std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;, ref$ (5 samples, 8.77%)</title><rect x="82.4561%" y="805" width="8.7719%" height="15" fill="rgb(245,114,25)" fg:x="47" fg:w="5"/><text x="82.7061%" y="815.50">soul_lang_ru..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::source_reader::source_reader::get_estimated_token_count(ref$ (3 samples, 5.26%)</title><rect x="85.9649%" y="789" width="5.2632%" height="15" fill="rgb(210,61,42)" fg:x="49" fg:w="3"/><text x="86.2149%" y="799.50">soul_l..</text></g><g><title>soul_lang_rust.exe`core::str::impl$0::matches(ref$&lt;str$&gt;, ref$ (2 samples, 3.51%)</title><rect x="87.7193%" y="773" width="3.5088%" height="15" fill="rgb(211,52,33)" fg:x="50" fg:w="2"/><text x="87.9693%" y="783.50">sou..</text></g><g><title>soul_lang_rust.exe`core::str::pattern::StrSearcher::new (1 samples, 1.75%)</title><rect x="89.4737%" y="757" width="1.7544%" height="15" fill="rgb(234,58,33)" fg:x="51" fg:w="1"/><text x="89.7237%" y="767.50"></text></g><g><title>soul_lang_rust.exe`core::str::pattern::TwoWaySearcher::new (1 samples, 1.75%)</title><rect x="89.4737%" y="741" width="1.7544%" height="15" fill="rgb(220,115,36)" fg:x="51" fg:w="1"/><text x="89.7237%" y="751.50"></text></g><g><title>soul_lang_rust.exe`core::str::pattern::TwoWaySearcher::byteset_create (1 samples, 1.75%)</title><rect x="89.4737%" y="725" width="1.7544%" height="15" fill="rgb(243,153,54)" fg:x="51" fg:w="1"/><text x="89.7237%" y="735.50"></text></g><g><title>soul_lang_rust.exe`core::slice::iter::impl$182::fold (1 samples, 1.75%)</title><rect x="89.4737%" y="709" width="1.7544%" height="15" fill="rgb(251,47,18)" fg:x="51" fg:w="1"/><text x="89.7237%" y="719.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::tokenizer::tokenizer::needs_to_dot_tokenize(ref$ (1 samples, 1.75%)</title><rect x="91.2281%" y="773" width="1.7544%" height="15" fill="rgb(242,102,42)" fg:x="52" fg:w="1"/><text x="91.4781%" y="783.50"></text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::tokenizer::tokenizer::token_is_number(ref$ (1 samples, 1.75%)</title><rect x="91.2281%" y="757" width="1.7544%" height="15" fill="rgb(234,31,38)" fg:x="52" fg:w="1"/><text x="91.4781%" y="767.50"></text></g><g><title>soul_lang_rust.exe`core::str::impl$0::parse(ref$ (1 samples, 1.75%)</title><rect x="91.2281%" y="741" width="1.7544%" height="15" fill="rgb(221,117,51)" fg:x="52" fg:w="1"/><text x="91.4781%" y="751.50"></text></g><g><title>soul_lang_rust.exe`core::num::dec2flt::impl$3::from_str (1 samples, 1.75%)</title><rect x="91.2281%" y="725" width="1.7544%" height="15" fill="rgb(212,20,18)" fg:x="52" fg:w="1"/><text x="91.4781%" y="735.50"></text></g><g><title>soul_lang_rust.exe`core::num::dec2flt::dec2flt (1 samples, 1.75%)</title><rect x="91.2281%" y="709" width="1.7544%" height="15" fill="rgb(245,133,36)" fg:x="52" fg:w="1"/><text x="91.4781%" y="719.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;enum2$&lt;regex_syntax::ast::Ast&gt;,regex_syntax::ast::Error&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;enum2$&lt;regex_syntax::ast::Ast&gt;,regex_syntax::ast::Error&gt; &gt;, regex_automata::meta::regex::impl$21::build_many::closure_env$0&lt;ref$ (1 samples, 1.75%)</title><rect x="92.9825%" y="517" width="1.7544%" height="15" fill="rgb(212,6,19)" fg:x="53" fg:w="1"/><text x="93.2325%" y="527.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::ast::parse::Parser::parse(ref$ (1 samples, 1.75%)</title><rect x="92.9825%" y="501" width="1.7544%" height="15" fill="rgb(218,1,36)" fg:x="53" fg:w="1"/><text x="93.2325%" y="511.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::ast::parse::ParserI&lt;ref_mut$&lt;regex_syntax::ast::parse::Parser&gt; &gt;::parse (1 samples, 1.75%)</title><rect x="92.9825%" y="485" width="1.7544%" height="15" fill="rgb(246,84,54)" fg:x="53" fg:w="1"/><text x="93.2325%" y="495.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::ast::parse::ParserI&lt;ref_mut$&lt;regex_syntax::ast::parse::Parser&gt; &gt;::parse_with_comments&lt;ref_mut$&lt;regex_syntax::ast::parse::Parser&gt; &gt; (1 samples, 1.75%)</title><rect x="92.9825%" y="469" width="1.7544%" height="15" fill="rgb(242,110,6)" fg:x="53" fg:w="1"/><text x="93.2325%" y="479.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;regex_syntax::ast::parse::Primitive&gt;::into_ast(enum2$ (1 samples, 1.75%)</title><rect x="92.9825%" y="453" width="1.7544%" height="15" fill="rgb(214,47,5)" fg:x="53" fg:w="1"/><text x="93.2325%" y="463.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;regex_syntax::ast::Ast&gt;::literal (1 samples, 1.75%)</title><rect x="92.9825%" y="437" width="1.7544%" height="15" fill="rgb(218,159,25)" fg:x="53" fg:w="1"/><text x="93.2325%" y="447.50"></text></g><g><title>soul_lang_rust.exe`alloc::boxed::impl$0::new (1 samples, 1.75%)</title><rect x="92.9825%" y="421" width="1.7544%" height="15" fill="rgb(215,211,28)" fg:x="53" fg:w="1"/><text x="93.2325%" y="431.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::exchange_malloc (1 samples, 1.75%)</title><rect x="92.9825%" y="405" width="1.7544%" height="15" fill="rgb(238,59,32)" fg:x="53" fg:w="1"/><text x="93.2325%" y="415.50"></text></g><g><title>`0x7FFF985EF164 (1 samples, 1.75%)</title><rect x="92.9825%" y="389" width="1.7544%" height="15" fill="rgb(226,82,3)" fg:x="53" fg:w="1"/><text x="93.2325%" y="399.50"></text></g><g><title>`0x7FFF985EF2A4 (1 samples, 1.75%)</title><rect x="92.9825%" y="373" width="1.7544%" height="15" fill="rgb(240,164,32)" fg:x="53" fg:w="1"/><text x="93.2325%" y="383.50"></text></g><g><title>`0x7FFF985F0206 (1 samples, 1.75%)</title><rect x="92.9825%" y="357" width="1.7544%" height="15" fill="rgb(232,46,7)" fg:x="53" fg:w="1"/><text x="93.2325%" y="367.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;regex_automata::util::prefilter::Choice&gt;::new&lt;regex_syntax::hir::literal::Literal&gt;(regex_automata::util::search::MatchKind, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="94.7368%" y="453" width="1.7544%" height="15" fill="rgb(229,129,53)" fg:x="54" fg:w="1"/><text x="94.9868%" y="463.50"></text></g><g><title>soul_lang_rust.exe`regex_automata::util::prefilter::aho_corasick::AhoCorasick::new&lt;regex_syntax::hir::literal::Literal&gt;(regex_automata::util::search::MatchKind, ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="94.7368%" y="437" width="1.7544%" height="15" fill="rgb(234,188,29)" fg:x="54" fg:w="1"/><text x="94.9868%" y="447.50"></text></g><g><title>soul_lang_rust.exe`aho_corasick::ahocorasick::AhoCorasickBuilder::build&lt;ref$&lt;slice2$&lt;regex_syntax::hir::literal::Literal&gt; &gt;,ref$&lt;regex_syntax::hir::literal::Literal&gt; &gt;(ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="94.7368%" y="421" width="1.7544%" height="15" fill="rgb(246,141,4)" fg:x="54" fg:w="1"/><text x="94.9868%" y="431.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (1 samples, 1.75%)</title><rect x="94.7368%" y="405" width="1.7544%" height="15" fill="rgb(229,23,39)" fg:x="54" fg:w="1"/><text x="94.9868%" y="415.50"></text></g><g><title>soul_lang_rust.exe`aho_corasick::dfa::Builder::build_from_noncontiguous (1 samples, 1.75%)</title><rect x="94.7368%" y="389" width="1.7544%" height="15" fill="rgb(206,12,3)" fg:x="54" fg:w="1"/><text x="94.9868%" y="399.50"></text></g><g><title>soul_lang_rust.exe`aho_corasick::dfa::Builder::finish_build_both_starts (1 samples, 1.75%)</title><rect x="94.7368%" y="373" width="1.7544%" height="15" fill="rgb(252,226,20)" fg:x="54" fg:w="1"/><text x="94.9868%" y="383.50"></text></g><g><title>soul_lang_rust.exe`aho_corasick::dfa::sparse_iter (1 samples, 1.75%)</title><rect x="94.7368%" y="357" width="1.7544%" height="15" fill="rgb(216,123,35)" fg:x="54" fg:w="1"/><text x="94.9868%" y="367.50"></text></g><g><title>soul_lang_rust.exe`once_cell::imp::OnceCell&lt;regex::regex::string::Regex&gt;::initialize&lt;regex::regex::string::Regex,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;regex::regex::string::Regex,once_cell::sync::impl$11::force::closure_env$0&lt;regex::regex::string::Regex,regex::regex::string::Regex (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::sync::impl$6::get_or_init::closure_env$0&lt;regex::regex::string::Regex,once_cell::sync::impl$11::force::closure_env$0&lt;regex::regex::string::Regex,regex::regex::string::Regex (*) (3 samples, 5.26%)</title><rect x="92.9825%" y="757" width="5.2632%" height="15" fill="rgb(212,68,40)" fg:x="53" fg:w="3"/><text x="93.2325%" y="767.50">soul_l..</text></g><g><title>soul_lang_rust.exe`once_cell::imp::initialize_or_wait(core::sync::atomic::AtomicPtr&lt;once_cell::imp::Waiter&gt;*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;&gt;,assoc$ (3 samples, 5.26%)</title><rect x="92.9825%" y="741" width="5.2632%" height="15" fill="rgb(254,125,32)" fg:x="53" fg:w="3"/><text x="93.2325%" y="751.50">soul_l..</text></g><g><title>soul_lang_rust.exe`once_cell::imp::impl$4::initialize::closure$0&lt;regex::regex::string::Regex,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;regex::regex::string::Regex,once_cell::sync::impl$11::force::closure_env$0&lt;regex::regex::string::Regex,regex::regex::string::Regex (*)()&gt; &gt;,enum2$&lt;once_cell::sync::impl$6::get_or_init::Void&gt; &gt;(once_cell::imp::impl$4::initialize::closure_env$0&lt;regex::regex::string::Regex,once_cell::sync::impl$6::get_or_init::closure_env$0&lt;regex::regex::string::Regex,once_cell::sync::impl$11::force::closure_env$0&lt;regex::regex::string::Regex,regex::regex::string::Regex (*)()&gt; &gt;,enum2$ (3 samples, 5.26%)</title><rect x="92.9825%" y="725" width="5.2632%" height="15" fill="rgb(253,97,22)" fg:x="53" fg:w="3"/><text x="93.2325%" y="735.50">soul_l..</text></g><g><title>soul_lang_rust.exe`core::ops::function::FnOnce::call_once&lt;soul_lang_rust::steps::tokenizer::tokenizer::TOKEN_SPLIT_REGEX::closure_env$0,tuple$&lt;&gt; &gt; (3 samples, 5.26%)</title><rect x="92.9825%" y="709" width="5.2632%" height="15" fill="rgb(241,101,14)" fg:x="53" fg:w="3"/><text x="93.2325%" y="719.50">soul_l..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::tokenizer::tokenizer::TOKEN_SPLIT_REGEX::closure$0 (3 samples, 5.26%)</title><rect x="92.9825%" y="693" width="5.2632%" height="15" fill="rgb(238,103,29)" fg:x="53" fg:w="3"/><text x="93.2325%" y="703.50">soul_l..</text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::result::Result&lt;regex::regex::string::Regex,enum2$&lt;regex::error::Error&gt; &gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;regex::regex::string::Regex,enum2$ (3 samples, 5.26%)</title><rect x="92.9825%" y="677" width="5.2632%" height="15" fill="rgb(233,195,47)" fg:x="53" fg:w="3"/><text x="93.2325%" y="687.50">soul_l..</text></g><g><title>soul_lang_rust.exe`regex::regex::string::Regex::new(ref$ (3 samples, 5.26%)</title><rect x="92.9825%" y="661" width="5.2632%" height="15" fill="rgb(246,218,30)" fg:x="53" fg:w="3"/><text x="93.2325%" y="671.50">soul_l..</text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (3 samples, 5.26%)</title><rect x="92.9825%" y="645" width="5.2632%" height="15" fill="rgb(219,145,47)" fg:x="53" fg:w="3"/><text x="93.2325%" y="655.50">soul_l..</text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place (3 samples, 5.26%)</title><rect x="92.9825%" y="629" width="5.2632%" height="15" fill="rgb(243,12,26)" fg:x="53" fg:w="3"/><text x="93.2325%" y="639.50">soul_l..</text></g><g><title>soul_lang_rust.exe`core::ptr::drop_in_place(alloc::vec::Vec (3 samples, 5.26%)</title><rect x="92.9825%" y="613" width="5.2632%" height="15" fill="rgb(214,87,16)" fg:x="53" fg:w="3"/><text x="93.2325%" y="623.50">soul_l..</text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$25::drop(alloc::vec::Vec (3 samples, 5.26%)</title><rect x="92.9825%" y="597" width="5.2632%" height="15" fill="rgb(208,99,42)" fg:x="53" fg:w="3"/><text x="93.2325%" y="607.50">soul_l..</text></g><g><title>soul_lang_rust.exe`regex::builders::string::RegexBuilder::build (3 samples, 5.26%)</title><rect x="92.9825%" y="581" width="5.2632%" height="15" fill="rgb(253,99,2)" fg:x="53" fg:w="3"/><text x="93.2325%" y="591.50">soul_l..</text></g><g><title>soul_lang_rust.exe`regex::builders::Builder::build_one_string (3 samples, 5.26%)</title><rect x="92.9825%" y="565" width="5.2632%" height="15" fill="rgb(220,168,23)" fg:x="53" fg:w="3"/><text x="93.2325%" y="575.50">soul_l..</text></g><g><title>soul_lang_rust.exe`regex_automata::meta::regex::Builder::build(ref$ (3 samples, 5.26%)</title><rect x="92.9825%" y="549" width="5.2632%" height="15" fill="rgb(242,38,24)" fg:x="53" fg:w="3"/><text x="93.2325%" y="559.50">soul_l..</text></g><g><title>soul_lang_rust.exe`regex_automata::meta::regex::Builder::build_many(ref$&lt;slice2$&lt;ref$ (3 samples, 5.26%)</title><rect x="92.9825%" y="533" width="5.2632%" height="15" fill="rgb(225,182,9)" fg:x="53" fg:w="3"/><text x="93.2325%" y="543.50">soul_l..</text></g><g><title>soul_lang_rust.exe`regex_automata::meta::regex::Builder::build_many_from_hir(ref$&lt;slice2$ (2 samples, 3.51%)</title><rect x="94.7368%" y="517" width="3.5088%" height="15" fill="rgb(243,178,37)" fg:x="54" fg:w="2"/><text x="94.9868%" y="527.50">sou..</text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;alloc::sync::Arc&lt;dyn$ (2 samples, 3.51%)</title><rect x="94.7368%" y="501" width="3.5088%" height="15" fill="rgb(232,139,19)" fg:x="54" fg:w="2"/><text x="94.9868%" y="511.50">sou..</text></g><g><title>soul_lang_rust.exe`regex_automata::meta::strategy::new(regex_automata::meta::regex::RegexInfo*, ref$&lt;slice2$&lt;ref$ (2 samples, 3.51%)</title><rect x="94.7368%" y="485" width="3.5088%" height="15" fill="rgb(225,201,24)" fg:x="54" fg:w="2"/><text x="94.9868%" y="495.50">sou..</text></g><g><title>soul_lang_rust.exe`regex_automata::meta::strategy::Pre&lt;tuple$&lt;&gt; &gt;::from_prefixes (2 samples, 3.51%)</title><rect x="94.7368%" y="469" width="3.5088%" height="15" fill="rgb(221,47,46)" fg:x="54" fg:w="2"/><text x="94.9868%" y="479.50">sou..</text></g><g><title>soul_lang_rust.exe`regex_syntax::hir::literal::Seq::is_exact (1 samples, 1.75%)</title><rect x="96.4912%" y="453" width="1.7544%" height="15" fill="rgb(249,23,13)" fg:x="55" fg:w="1"/><text x="96.7412%" y="463.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::hir::literal::Seq::literals (1 samples, 1.75%)</title><rect x="96.4912%" y="437" width="1.7544%" height="15" fill="rgb(219,9,5)" fg:x="55" fg:w="1"/><text x="96.7412%" y="447.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal,alloc::alloc::Global&gt; &gt; &gt;::as_deref (1 samples, 1.75%)</title><rect x="96.4912%" y="421" width="1.7544%" height="15" fill="rgb(254,171,16)" fg:x="55" fg:w="1"/><text x="96.7412%" y="431.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal,alloc::alloc::Global&gt; &gt; &gt;::as_ref (1 samples, 1.75%)</title><rect x="96.4912%" y="405" width="1.7544%" height="15" fill="rgb(230,171,20)" fg:x="55" fg:w="1"/><text x="96.7412%" y="415.50"></text></g><g><title>soul_lang_rust.exe`regex_automata::util::prefilter::prefixes&lt;ref$&lt;regex_syntax::hir::Hir&gt; &gt;(regex_automata::util::search::MatchKind, ref$&lt;slice2$&lt;ref$ (1 samples, 1.75%)</title><rect x="96.4912%" y="389" width="1.7544%" height="15" fill="rgb(210,71,41)" fg:x="55" fg:w="1"/><text x="96.7412%" y="399.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::hir::literal::Seq::optimize_for_prefix_by_preference (1 samples, 1.75%)</title><rect x="96.4912%" y="373" width="1.7544%" height="15" fill="rgb(206,173,20)" fg:x="55" fg:w="1"/><text x="96.7412%" y="383.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 1.75%)</title><rect x="96.4912%" y="357" width="1.7544%" height="15" fill="rgb(233,88,34)" fg:x="55" fg:w="1"/><text x="96.7412%" y="367.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::hir::literal::Seq::len (1 samples, 1.75%)</title><rect x="96.4912%" y="341" width="1.7544%" height="15" fill="rgb(223,209,46)" fg:x="55" fg:w="1"/><text x="96.7412%" y="351.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal,alloc::alloc::Global&gt; &gt; &gt;::as_ref (1 samples, 1.75%)</title><rect x="96.4912%" y="325" width="1.7544%" height="15" fill="rgb(250,43,18)" fg:x="55" fg:w="1"/><text x="96.7412%" y="335.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::hir::literal::PreferenceTrie::minimize(alloc::vec::Vec (1 samples, 1.75%)</title><rect x="96.4912%" y="309" width="1.7544%" height="15" fill="rgb(208,13,10)" fg:x="55" fg:w="1"/><text x="96.7412%" y="319.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal,alloc::alloc::Global&gt;::retain_mut&lt;regex_syntax::hir::literal::Literal,alloc::alloc::Global,regex_syntax::hir::literal::impl$12::minimize::closure_env$0&gt; (1 samples, 1.75%)</title><rect x="96.4912%" y="293" width="1.7544%" height="15" fill="rgb(212,200,36)" fg:x="55" fg:w="1"/><text x="96.7412%" y="303.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::impl$1::retain_mut::process_loop(unsigned long long, regex_syntax::hir::literal::impl$12::minimize::closure_env$0*, alloc::vec::impl$1::retain_mut::BackshiftOnDrop (1 samples, 1.75%)</title><rect x="96.4912%" y="277" width="1.7544%" height="15" fill="rgb(225,90,30)" fg:x="55" fg:w="1"/><text x="96.7412%" y="287.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::hir::literal::impl$12::minimize::closure$0 (1 samples, 1.75%)</title><rect x="96.4912%" y="261" width="1.7544%" height="15" fill="rgb(236,182,39)" fg:x="55" fg:w="1"/><text x="96.7412%" y="271.50"></text></g><g><title>soul_lang_rust.exe`regex_syntax::hir::literal::PreferenceTrie::insert(ref$&lt;slice2$ (1 samples, 1.75%)</title><rect x="96.4912%" y="245" width="1.7544%" height="15" fill="rgb(212,144,35)" fg:x="55" fg:w="1"/><text x="96.7412%" y="255.50"></text></g><g><title>soul_lang_rust.exe`alloc::vec::Vec&lt;tuple$&lt;u8,usize&gt;,alloc::alloc::Global&gt;::insert(unsigned long long, tuple$ (1 samples, 1.75%)</title><rect x="96.4912%" y="229" width="1.7544%" height="15" fill="rgb(228,63,44)" fg:x="55" fg:w="1"/><text x="96.7412%" y="239.50"></text></g><g><title>soul_lang_rust.exe`core::ptr::mut_ptr::impl$0::add(tuple$ (1 samples, 1.75%)</title><rect x="96.4912%" y="213" width="1.7544%" height="15" fill="rgb(228,109,6)" fg:x="55" fg:w="1"/><text x="96.7412%" y="223.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVec&lt;soul_lang_rust::steps::source_reader::c_str::format_stringer::FormatSpan,alloc::alloc::Global&gt;::grow_one&lt;soul_lang_rust::steps::source_reader::c_str::format_stringer::FormatSpan,alloc::alloc::Global&gt; (1 samples, 1.75%)</title><rect x="96.4912%" y="197" width="1.7544%" height="15" fill="rgb(238,117,24)" fg:x="55" fg:w="1"/><text x="96.7412%" y="207.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1 samples, 1.75%)</title><rect x="96.4912%" y="181" width="1.7544%" height="15" fill="rgb(242,26,26)" fg:x="55" fg:w="1"/><text x="96.7412%" y="191.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1 samples, 1.75%)</title><rect x="96.4912%" y="165" width="1.7544%" height="15" fill="rgb(221,92,48)" fg:x="55" fg:w="1"/><text x="96.7412%" y="175.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1 samples, 1.75%)</title><rect x="96.4912%" y="149" width="1.7544%" height="15" fill="rgb(209,209,32)" fg:x="55" fg:w="1"/><text x="96.7412%" y="159.50"></text></g><g><title>soul_lang_rust.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="96.4912%" y="133" width="1.7544%" height="15" fill="rgb(221,70,22)" fg:x="55" fg:w="1"/><text x="96.7412%" y="143.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="96.4912%" y="117" width="1.7544%" height="15" fill="rgb(248,145,5)" fg:x="55" fg:w="1"/><text x="96.7412%" y="127.50"></text></g><g><title>soul_lang_rust.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="96.4912%" y="101" width="1.7544%" height="15" fill="rgb(226,116,26)" fg:x="55" fg:w="1"/><text x="96.7412%" y="111.50"></text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1 samples, 1.75%)</title><rect x="96.4912%" y="85" width="1.7544%" height="15" fill="rgb(244,5,17)" fg:x="55" fg:w="1"/><text x="96.7412%" y="95.50"></text></g><g><title>`0x7FFF985EF164 (1 samples, 1.75%)</title><rect x="96.4912%" y="69" width="1.7544%" height="15" fill="rgb(252,159,33)" fg:x="55" fg:w="1"/><text x="96.7412%" y="79.50"></text></g><g><title>`0x7FFF985EF2A4 (1 samples, 1.75%)</title><rect x="96.4912%" y="53" width="1.7544%" height="15" fill="rgb(206,71,0)" fg:x="55" fg:w="1"/><text x="96.7412%" y="63.50"></text></g><g><title>`0x7FFF985EF8D2 (1 samples, 1.75%)</title><rect x="96.4912%" y="37" width="1.7544%" height="15" fill="rgb(233,118,54)" fg:x="55" fg:w="1"/><text x="96.7412%" y="47.50"></text></g><g><title>all (57 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(234,83,48)" fg:x="0" fg:w="57"/><text x="0.2500%" y="1103.50"></text></g><g><title>`0x7FFF9861C34C (34 samples, 59.65%)</title><rect x="40.3509%" y="1077" width="59.6491%" height="15" fill="rgb(228,3,54)" fg:x="23" fg:w="34"/><text x="40.6009%" y="1087.50">`0x7FFF9861C34C</text></g><g><title>`0x7FFF9681E8D7 (34 samples, 59.65%)</title><rect x="40.3509%" y="1061" width="59.6491%" height="15" fill="rgb(226,155,13)" fg:x="23" fg:w="34"/><text x="40.6009%" y="1071.50">`0x7FFF9681E8D7</text></g><g><title>soul_lang_rust.exe`__scrt_common_main_seh() (33 samples, 57.89%)</title><rect x="42.1053%" y="1045" width="57.8947%" height="15" fill="rgb(241,28,37)" fg:x="24" fg:w="33"/><text x="42.3553%" y="1055.50">soul_lang_rust.exe`__scrt_common_main_seh()</text></g><g><title>soul_lang_rust.exe`invoke_main() (28 samples, 49.12%)</title><rect x="50.8772%" y="1029" width="49.1228%" height="15" fill="rgb(233,93,10)" fg:x="29" fg:w="28"/><text x="51.1272%" y="1039.50">soul_lang_rust.exe`invoke_main()</text></g><g><title>soul_lang_rust.exe`main (28 samples, 49.12%)</title><rect x="50.8772%" y="1013" width="49.1228%" height="15" fill="rgb(225,113,19)" fg:x="29" fg:w="28"/><text x="51.1272%" y="1023.50">soul_lang_rust.exe`main</text></g><g><title>soul_lang_rust.exe`std::rt::lang_start_internal (28 samples, 49.12%)</title><rect x="50.8772%" y="997" width="49.1228%" height="15" fill="rgb(241,2,18)" fg:x="29" fg:w="28"/><text x="51.1272%" y="1007.50">soul_lang_rust.exe`std::rt::lang_start_internal</text></g><g><title>soul_lang_rust.exe`std::panic::catch_unwind (28 samples, 49.12%)</title><rect x="50.8772%" y="981" width="49.1228%" height="15" fill="rgb(228,207,21)" fg:x="29" fg:w="28"/><text x="51.1272%" y="991.50">soul_lang_rust.exe`std::panic::catch_unwind</text></g><g><title>soul_lang_rust.exe`std::panicking::try (28 samples, 49.12%)</title><rect x="50.8772%" y="965" width="49.1228%" height="15" fill="rgb(213,211,35)" fg:x="29" fg:w="28"/><text x="51.1272%" y="975.50">soul_lang_rust.exe`std::panicking::try</text></g><g><title>soul_lang_rust.exe`std::panicking::try::do_call (28 samples, 49.12%)</title><rect x="50.8772%" y="949" width="49.1228%" height="15" fill="rgb(209,83,10)" fg:x="29" fg:w="28"/><text x="51.1272%" y="959.50">soul_lang_rust.exe`std::panicking::try::do_call</text></g><g><title>soul_lang_rust.exe`std::rt::lang_start_internal::closure$1 (28 samples, 49.12%)</title><rect x="50.8772%" y="933" width="49.1228%" height="15" fill="rgb(209,164,1)" fg:x="29" fg:w="28"/><text x="51.1272%" y="943.50">soul_lang_rust.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>soul_lang_rust.exe`std::panic::catch_unwind (28 samples, 49.12%)</title><rect x="50.8772%" y="917" width="49.1228%" height="15" fill="rgb(213,184,43)" fg:x="29" fg:w="28"/><text x="51.1272%" y="927.50">soul_lang_rust.exe`std::panic::catch_unwind</text></g><g><title>soul_lang_rust.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (28 samples, 49.12%)</title><rect x="50.8772%" y="901" width="49.1228%" height="15" fill="rgb(231,61,34)" fg:x="29" fg:w="28"/><text x="51.1272%" y="911.50">soul_lang_rust.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start:..</text></g><g><title>soul_lang_rust.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (28 samples, 49.12%)</title><rect x="50.8772%" y="885" width="49.1228%" height="15" fill="rgb(235,75,3)" fg:x="29" fg:w="28"/><text x="51.1272%" y="895.50">soul_lang_rust.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),t..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::main (28 samples, 49.12%)</title><rect x="50.8772%" y="869" width="49.1228%" height="15" fill="rgb(220,106,47)" fg:x="29" fg:w="28"/><text x="51.1272%" y="879.50">soul_lang_rust.exe`soul_lang_rust::main</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::compiler (27 samples, 47.37%)</title><rect x="52.6316%" y="853" width="47.3684%" height="15" fill="rgb(210,196,33)" fg:x="30" fg:w="27"/><text x="52.8816%" y="863.50">soul_lang_rust.exe`soul_lang_rust::compiler</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::tokenizer (5 samples, 8.77%)</title><rect x="91.2281%" y="837" width="8.7719%" height="15" fill="rgb(229,154,42)" fg:x="52" fg:w="5"/><text x="91.4781%" y="847.50">soul_lang_ru..</text></g><g><title>soul_lang_rust.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result (5 samples, 8.77%)</title><rect x="91.2281%" y="821" width="8.7719%" height="15" fill="rgb(228,114,26)" fg:x="52" fg:w="5"/><text x="91.4781%" y="831.50">soul_lang_ru..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::tokenizer::tokenizer::tokenize (5 samples, 8.77%)</title><rect x="91.2281%" y="805" width="8.7719%" height="15" fill="rgb(208,144,1)" fg:x="52" fg:w="5"/><text x="91.4781%" y="815.50">soul_lang_ru..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::tokenizer::tokenizer::get_tokens(soul_lang_rust::steps::step_interfaces::i_source_reader::FileLine, alloc::vec::Vec (5 samples, 8.77%)</title><rect x="91.2281%" y="789" width="8.7719%" height="15" fill="rgb(239,112,37)" fg:x="52" fg:w="5"/><text x="91.4781%" y="799.50">soul_lang_ru..</text></g><g><title>soul_lang_rust.exe`soul_lang_rust::steps::tokenizer::tokenizer::split_tokens(ref$ (4 samples, 7.02%)</title><rect x="92.9825%" y="773" width="7.0175%" height="15" fill="rgb(210,96,50)" fg:x="53" fg:w="4"/><text x="93.2325%" y="783.50">soul_lang..</text></g><g><title>soul_lang_rust.exe`regex::regex::string::impl$17::next (1 samples, 1.75%)</title><rect x="98.2456%" y="757" width="1.7544%" height="15" fill="rgb(222,178,2)" fg:x="56" fg:w="1"/><text x="98.4956%" y="767.50"></text></g><g><title>soul_lang_rust.exe`enum2$&lt;core::option::Option&lt;regex_automata::util::search::Match&gt; &gt;::map(enum2$&lt;core::option::Option (1 samples, 1.75%)</title><rect x="98.2456%" y="741" width="1.7544%" height="15" fill="rgb(226,74,18)" fg:x="56" fg:w="1"/><text x="98.4956%" y="751.50"></text></g><g><title>soul_lang_rust.exe`regex_automata::util::iter::Searcher::advance&lt;regex_automata::meta::regex::impl$8::next::closure_env$0&gt; (1 samples, 1.75%)</title><rect x="98.2456%" y="725" width="1.7544%" height="15" fill="rgb(225,67,54)" fg:x="56" fg:w="1"/><text x="98.4956%" y="735.50"></text></g></svg></svg>