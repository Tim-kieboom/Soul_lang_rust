const num = sum<int>(1, 2)
type string typeof str

main() {}

functionCall() {
    sumInner(int a, int b) int {
        return a + b
    }

    sumGeneric<T: Number>(T a, T b) T {
        return a + b
    }

    Println("hello world")
    Println(f"num == {num}")
    sumInner(1, 2)
    sumGeneric<int>(1, 2)
    NamedTupleCtor(value: 1, field: "hello", sum: sum(1,2))
    int.MAX
    int.Parse("1")

    var.field
    var.Methode()  
    var.field.Methode()
}

variable() {
    var := 1 //int(1)
    let letVar = 1.0 //f32(1.0)
    const constVar = 0b1 //uint(1)
    Literal literalVar = -1 //int(-1)

    int intVar = 1
    const int intConst = 1
    Literal int intLiteral = 1

    num := sum(1, 2)
    num = sum<int>(1, 2)
    num = 2
    num = num.sum(1)
    num = num.sum<int>(1)

    Object defaultCtor = (:) 
    obj := Object(field: 1)
    obj = Object(:)
    obj = Object()
    num = obj.field
    num = obj.field.methode()
    num = obj.field.methode<int>()
}

expressionGroups() {

    one() int {
        return 1
    }

    literalArray := [1, 2, 3.0, 4]
    foo := 100 log 10
    literalTuple := (true, 1, 2.0, 0b11, "4")
    literalNamedTuple := (value: 1, text: "hello world")

    array := [1, 2, 3, 4, one()]
    tuple := (true, one(), 2.0, 0b11, "4")
    namedTuple := (value: one(), text: "hello world")

    list := List[f32: 1, 2, 3, 4, 5]
    arr := [f32: 1, 2, 3, 4, 5]
    arr = [f32: for 10 => 0]
    arr = [for i in 10 => i%2]
    map := [(str, bool):
        ("hello", true),
        ("world", false),
    ]

    Json json = (value: one())
    json = Json(sum: sum(1,2), other: 1)
}

sum(int a, int b) int {
    return a + b
}

int sum(this, int b) int {
    return this + b
}


















