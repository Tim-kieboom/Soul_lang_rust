traits() {
    trait Sub {
        Sub(this, This a) This
    }

    trait Add<T, R = T> impl Debug + Number 
    where 
        T: Debug 
    {
        Add(this, T a) R
        WouldAddOverflow(this@, T a) bool
    }
}

structs() {
    struct Object {
        int field
        int default = 0
        int pubGet {set;} = 0
        int pub {Get; Set;} = 0
        int private {set; get;} = 0
    }

    struct Gen<T> 
    where 
        T: Default 
    {
        T field = ()
    }

    Object This(int field) {
        return This{field, ..}
    }

    mut object = Object{field: 1, ..}
    object = Object(1)
}

classes() {

    class Class impl Add<This> {
        int field
        int default = 0
        int pubGet {Get;} = 0
        int pub {Get; Set;} = 0
        int private {set; get;} = 0

        int[] ints {Get;} = []

        Push(this&, int el) {
            this.ints = this.ints + [0]
            
            const lastIndex = this.ints.Len()-1
            this.ints[lastIndex] = el
        }

        This(field) {
            return This{field, ..}
        }

        this() {
            return This{}
        }

        This::[int[] array] {
            return This{field: 0, ints: array, ..}
        }

        PubConsume(this) This {
            return this
        }

        privConsume(this) This {
            return this            
        }

        ToNamedTuple(this@) (int field, int default, int pubGet, int pub, int private, int[] ints) {
            const self = this.copy
            return {
                pub: self.pub,
                ints: self.ints,
                field: self.field,
                pubGet: self.punGet,
                default: self.default,
                private: self.private,
            }
        }

        impl Add<This> {
           
            Add(this, This a) This {
                self := this.field.copy
                self.field += a.field
                return this                
            }
        }
    }

    // use Class impl Sub<This> {

    //     Sub(mut this, This a) This {
    //         self := this.field.copy
    //         self.field -= a.field
    //         return this 
    //     } 
    // }

    class Data {
        int field
        int default = 0
        int pubGet {Get;} = 0
        int pub {Get; Set;} = 0
        int private {set; get;} = 0

        int[] ints {Get;} = []
    }

    Class This(Data data) {
        return This{field: data.field, ..}
    }

    class GenClass<T>
    where 
        T: Default
    {
        T field = ()
        This() {
            return This{}
        }

        getField(this@) T@ {
            return this.field
        }
    }

    mut object = Class(1)
    object = Class[int: 1,2,3,4] 
}













