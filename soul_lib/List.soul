interface IList<T> typeof IIter<T> {
    Ctor::[](T[] init)

    Len(this@) usize

    Push(this&, T element)
    Push(this&, T[] elements)
    Pop(this&) Op<T>
    Peek(this@) Op<T>

    this::[](int index) T
    this::[](int begin, int end) T[]
}

class List<T> typeof IList<T>() {
    T[] buffer
    usize len { get; priv set; }

    Ctor();
    Ctor::[](T[] init) {
        this.buffer = init
        this.len = buffer.Len()
    }

    Ctor(usize initCap) {
        this.Reserve(initCap)
    }

    Len(this@) usize {
        this.len
    }

    Push(this&, T element) {
        if this.len + 1 > this.buffer.Len() {
            this.Reserve(this.buffer.Len() * 2)
        }

        this.buffer[this.len++] = element
    }

    Push(this&, T[] elements) {
        if this.len + this.elements.Len() > this.buffer.Len() {
            this.Reserve(this.buffer.Len() + elements.Len())
        }
        
        for element in elements {
            this.buffer[this.len++] = element
        }
    }

    Pop(this&) Op<T> {
        if this.len == 0 {
            return Empty;
        }

        return Value(this.buffer[--this.len])
    }

    Peek(this@) Op<T> {
        if len == 0 {
            return Empty;
        }

        return Value(buffer[len-1])
    }

    Reserve(this&, usize size) {
        buffer = unsafe{ copy[size] buffer }
        len = min(len, size)
    }

    Resize(this&, usize size, T default) {
        buffer = copy[size => default] buffer
        len = min(len, size)
    }

    this::[](int index) T {
        return buffer[index]
    }

    this::[](int begin, int end) T[] {
        return buffer[begin..end]
    }
}






