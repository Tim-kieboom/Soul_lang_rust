interface IMap<K, V> (
    type KeyValue

    Insert(K@ key, V value)
    
    Get(K key) Op<V@>
    GetMut(K key) Op<V&>
    Get(V key) Op<K@>
    GetMut(V key) Op<K&>

    Keys() IPullable<K>
    Values() IPullable<V>

    Iter() IPullableMut<KeyValue>
)

class HashMap<K, V> typeof IMap<K, V> 
where 
    K: Hashable
{
    Literal usize DEFAULT_SIZE = 1500

    struct KeyValue(K key, V value)
    type Bucket typeof List<KeyValue>

    Bucket[] buckets = []

    const Ctor() { 
        buckets = [DEFAULT_SIZE => Bucket[]] 
    }

    const Ctor(usize initialSize) {
        Assert_Bigger(initialSize, 0, "initialSize for HashMap needs to be bigger then 0")
        buckets = [initialSize => Bucket[]]
    }

    Ctor<T>(T[] inserts)
    where 
        T: typeof[IntoIter<KeyValue>, KeyValue[], Bucket]
    {
        buckets = [DEFAULT_SIZE => Bucket[]] 

        for kv in inserts {
            Insert(@kv.key, kv.value)
        }
    }

    Ctor<T>(usize initialSize, T[] inserts)
    where 
        T: typeof[IntoIter<KeyValue>, KeyValue[], Bucket]
    {
        Assert_Bigger(initialSize, 0, "initialSize for HashMap needs to be bigger then 0")
        buckets = [initialSize => Bucket[]] 

        for kv in inserts {
            Insert(@kv.key, kv.value)
        }
    }

    Insert(this&, K@ key, V value) {
        entry := &buckets[getIndex(key)]
        
        if entry.First(node => node.key == key) typeof Value(node) {
            node.value = value
            return
        }

        newNode := KeyValue(key: copy key, value: value)
        buckets[index].Push(newNode)
    }

    Get(this@, K@ key) KeyValue@ {
        entry := &buckets[getIndex(key)]
        return entry.First(node => node.key == key).except()
    }

    Keys(this@) Iter<K> {
        return Iter().Flatten().Select(kv => kv.key)
    }

    Values(this@) Iter<V> {
        return Iter().Flatten().Select(kv => kv.value)
    }

    Iter() Iter<KeyValue> {
        return HashMap_Iter<K, V>(buckets)
    }

    const getIndex(K@ key) usize {
        return usize(key.Hash()) % buckets.Len()
    }
}


class HashMap_Iter<K, V> typeof IPullable<Output>()
where 
    K: Hashable
(
    type Output typeof HashMap<K>V::KeyValue()
    
    Bucket[] buckets
    usize outerIndex = 0
    usize innerIndex = 0
)
{
    Ctor(this.buckets) { }

    Pull() Op<Output> {
        entry := pass buckets.At(outerIndex)
        for buckets.Len()+1 {

            if entry.At(innerIndex) typeof Value(kv) {
                innerIndex++
                return Value(kv)
            }

            entry = pass buckets.At(outerIndex)
            innerIndex = 0
            match entry.At(innerIndex) {
                Value(val) => return Value(val),
                Empty() => if ++outerIndex > buckets.Len(): return Empty()
            }
        }

        Panic("HashMap_Iter Pull loop out of bounds")
    }
}






